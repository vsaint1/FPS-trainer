#include "Exploits.h"

namespace Exploit {

void Exploit::RapidFire(SDK::ABP_PlayerCharacter_C *localPC) {

  static float fireRate;
  static bool bSaved = false;

  if (!bSaved) {
    fireRate = localPC->CurrentWeapon->FireRate;
    bSaved = true;
  }

  if (Config::Exploit::bRapidFire) {

    localPC->CurrentWeapon->FireRate = 0.0050f;
  } else {
    localPC->CurrentWeapon->FireRate = fireRate;
    bSaved = false;
  }
}

void SpeedHack(SDK::APlayerController *localPC) {


  static float maxAcceleration;

  static float maxWalkSpeed;

  if (Config::Exploit::bSpeedHack) {
    G::pLocalPlayer->Character->CharacterMovement->MaxAcceleration = 9999.f;
    G::pLocalPlayer->Character->CharacterMovement->MaxWalkSpeed = 1500.0f;
  } else {

    G::pLocalPlayer->Character->CharacterMovement->MaxAcceleration = 4096.0f;
    maxAcceleration;
    G::pLocalPlayer->Character->CharacterMovement->MaxWalkSpeed = 700.0f;
  }
}

void FlyHack(SDK::ABP_PlayerCharacter_C *localPc) { localPc->ClientCheatFly(); }

void GodMode(SDK::UBP_HealthComponent_C *healthComponent) {

  if (Config::Exploit::bGod) {

    healthComponent->MaxHP = 1337.0f;
    healthComponent->HP = 1337.0f;
  } else {
    healthComponent->MaxHP = 100.0f;
  }
}

void InfiniteAmmo(SDK::ABP_PlayerCharacter_C *localPc) {

  static int32_t ammoPerMag;

  static int32_t aAmmo;

  static bool bSaved = false;
  if (!bSaved) {
    ammoPerMag = localPc->CurrentWeapon->AmmoPerMag;
    aAmmo = localPc->CurrentWeapon->ActualAmmo;
    bSaved = true;
  }

  if (Config::Exploit::bInfiniteAmmo) {
    localPc->CurrentWeapon->AmmoPerMag = 100;
    localPc->CurrentWeapon->ActualAmmo = 999;
  } else {
    localPc->CurrentWeapon->AmmoPerMag = ammoPerMag;
    localPc->CurrentWeapon->ActualAmmo = aAmmo;
    bSaved = false;
  }
}

void OneHitKill(SDK::ABP_PlayerCharacter_C *localPc) {

  static float defaultDamage = 0.0f;
  static bool bSaved = false;

  if (!bSaved) {
    defaultDamage = localPc->CurrentWeapon->Damage;
    bSaved = true;
  }

  if (Config::Exploit::bOneHitKill) {
    localPc->CurrentWeapon->Damage = 9999.0f;
  } else {
    localPc->CurrentWeapon->Damage = defaultDamage;
    bSaved = false;
  }
}

void NoRecoil(SDK::ABP_PlayerCharacter_C *localPc) {

  static float recoilHMax;
  static float recoilHMin;
  static float recoilVMax;
  static float recoilVMin;

  static bool bSaved = false;

  if (!bSaved) {
    recoilHMax = localPc->CurrentWeapon->WeaponHorizontalRecoilMax;
    recoilHMin = localPc->CurrentWeapon->WeaponHorizontalRecoilMin;
    recoilVMax = localPc->CurrentWeapon->WeaponVerticalRecoilMax;
    recoilVMin = localPc->CurrentWeapon->WeaponVerticalRecoilMin;
    bSaved = true;
  }

  if (Config::Exploit::bNoRecoil) {
    localPc->CurrentWeapon->WeaponHorizontalRecoilMax = 0;
    localPc->CurrentWeapon->WeaponHorizontalRecoilMin = 0;
    localPc->CurrentWeapon->WeaponVerticalRecoilMax = 0;
    localPc->CurrentWeapon->WeaponVerticalRecoilMin = 0;
  } else {
    localPc->CurrentWeapon->WeaponHorizontalRecoilMax = recoilHMax;
    localPc->CurrentWeapon->WeaponHorizontalRecoilMin = recoilHMin;
    localPc->CurrentWeapon->WeaponVerticalRecoilMax = recoilVMax;
    localPc->CurrentWeapon->WeaponVerticalRecoilMin = recoilVMin;
    bSaved = false;
  }
}

void NoSpread(SDK::ABP_PlayerCharacter_C *localPc) {
  static bool bSaved = false;

  static float aimingSpread;
  static float weaponSpread;

  if (!bSaved) {
    aimingSpread = localPc->CurrentWeapon->AimingSpread;
    weaponSpread = localPc->CurrentWeapon->WeaponSpread;
    bSaved = true;
  }

  if (Config::Exploit::bNoSpread) {
    localPc->CurrentWeapon->AimingSpread = 0;
    localPc->CurrentWeapon->WeaponSpread = 0;
  } else {
    localPc->CurrentWeapon->AimingSpread = aimingSpread;
    localPc->CurrentWeapon->WeaponSpread = weaponSpread;
    bSaved = false;
  }
}

} // namespace Exploit