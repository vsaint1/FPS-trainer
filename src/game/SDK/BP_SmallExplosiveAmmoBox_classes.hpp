#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SmallExplosiveAmmoBox

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SmallExplosiveAmmoBox.BP_SmallExplosiveAmmoBox_C
// 0x0038 (0x0258 - 0x0220)
class ABP_SmallExplosiveAmmoBox_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        Scene;                                             // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   WidgetActor;                                       // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       InfluenceSphere;                                   // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckVelocityTimerHandle;                          // 0x0250(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void AddInitialImpulse();
	void FindOverlappingActorOnActivation();
	void Use(class AActor* Actor);
	void BndEvt__InfluenceSphere_K2Node_ComponentBoundEvent_2_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ReceiveBeginPlay();
	void Init_Medkit();
	void StopSimulatingPhysics();
	void ExecuteUbergraph_BP_SmallExplosiveAmmoBox(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SmallExplosiveAmmoBox_C">();
	}
	static class ABP_SmallExplosiveAmmoBox_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SmallExplosiveAmmoBox_C>();
	}
};
static_assert(alignof(ABP_SmallExplosiveAmmoBox_C) == 0x000008, "Wrong alignment on ABP_SmallExplosiveAmmoBox_C");
static_assert(sizeof(ABP_SmallExplosiveAmmoBox_C) == 0x000258, "Wrong size on ABP_SmallExplosiveAmmoBox_C");
static_assert(offsetof(ABP_SmallExplosiveAmmoBox_C, UberGraphFrame) == 0x000220, "Member 'ABP_SmallExplosiveAmmoBox_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_SmallExplosiveAmmoBox_C, Scene) == 0x000228, "Member 'ABP_SmallExplosiveAmmoBox_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_SmallExplosiveAmmoBox_C, StaticMesh) == 0x000230, "Member 'ABP_SmallExplosiveAmmoBox_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(ABP_SmallExplosiveAmmoBox_C, WidgetActor) == 0x000238, "Member 'ABP_SmallExplosiveAmmoBox_C::WidgetActor' has a wrong offset!");
static_assert(offsetof(ABP_SmallExplosiveAmmoBox_C, InfluenceSphere) == 0x000240, "Member 'ABP_SmallExplosiveAmmoBox_C::InfluenceSphere' has a wrong offset!");
static_assert(offsetof(ABP_SmallExplosiveAmmoBox_C, bActive) == 0x000248, "Member 'ABP_SmallExplosiveAmmoBox_C::bActive' has a wrong offset!");
static_assert(offsetof(ABP_SmallExplosiveAmmoBox_C, CheckVelocityTimerHandle) == 0x000250, "Member 'ABP_SmallExplosiveAmmoBox_C::CheckVelocityTimerHandle' has a wrong offset!");

}

