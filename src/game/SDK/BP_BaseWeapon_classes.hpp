#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseWeapon

#include "Basic.hpp"

#include "EEquipedWeapon_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EWeaponNames_structs.hpp"
#include "EAmmoType_structs.hpp"
#include "EFiringMode_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BaseWeapon.BP_BaseWeapon_C
// 0x0240 (0x0460 - 0x0220)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_BaseWeapon_C : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 MeshFPP;                                           // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkeletalMeshComponent*                 MeshTPP;                                           // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         AmmoPerMag;                                        // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         ActualAmmo;                                        // 0x0244(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FireRate;                                          // 0x024C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeapongRange;                                      // 0x0250(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponSpread;                                      // 0x0254(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponVerticalRecoilMax;                           // 0x0258(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponVerticalRecoilMin;                           // 0x025C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponHorizontalRecoilMax;                         // 0x0260(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponHorizontalRecoilMin;                         // 0x0264(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimingSpread;                                      // 0x0268(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAmmoType                                     AmmoType;                                          // 0x026C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26D[0x3];                                      // 0x026D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PickUpWeaponAmmo;                                  // 0x0270(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	bool                                          InitialValues;                                     // 0x0274(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          bHitScanBullets;                                   // 0x0275(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShotgun;                                          // 0x0276(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_277[0x1];                                      // 0x0277(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShotgunProjectilesPerShot;                         // 0x0278(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_27C[0x4];                                      // 0x027C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundCue*                              NoAmmoFireSound;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             FireSound;                                         // 0x0288(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MeleeDamageType;                                   // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 DamageType;                                        // 0x0298(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EFiringMode>                           FiringModes;                                       // 0x02A0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EFiringMode                                   ActualFiringMode;                                  // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B1[0x3];                                      // 0x02B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BulletsPerBurst;                                   // 0x02B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimingFOV;                                         // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AimingInterSpeed;                                  // 0x02BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EWeaponNames                                  WeaponName;                                        // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadshotMultiplier;                                // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BulletVelocity;                                    // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           FPP_EquipWeaponMontage;                            // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FPP_UnequipWeaponMontage;                          // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoverInterpSpeed;                                // 0x02E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RecoilInterpSpeed;                                 // 0x02E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         BurstFireRate;                                     // 0x02E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        MuzzleFlashEmitter;                                // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 FireShake;                                         // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInterface*                     ImpactDecal;                                       // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactDefaultEmitter;                              // 0x0308(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystem*                        ImpactBloodEmitter;                                // 0x0310(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ImpactDefaultCue;                                  // 0x0318(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             ImpactFleshSound;                                  // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FPP_FireWeaponMontage;                             // 0x0328(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FPP_ReloadWeaponMontage;                           // 0x0330(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          ShotAnimation;                                     // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TPP_EquipWeaponMontage;                            // 0x0340(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TPP_UnequipWeaponMontage;                          // 0x0348(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TPP_FireWeaponMontageLoop;                         // 0x0350(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           TPP_ReloadWeaponMontage;                           // 0x0358(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimSequence*                          ReloadWeaponAnimation;                             // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FPP_FireIronsightWeaponMontage;                    // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipedWeapon                                WeaponType;                                        // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_371[0xF];                                      // 0x0371(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FPP_WeaponOffsetTransform;                         // 0x0380(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	class UClass*                                 BreathingShake;                                    // 0x03B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             TPP_WeaponOffsetTransform;                         // 0x03C0(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShouldHideCrossHairInTPP;                         // 0x03F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_3F1[0x3];                                      // 0x03F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoiseRange;                                        // 0x03F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         NoiseLoudness;                                     // 0x03F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           TPP_FireWeaponMontage;                             // 0x0400(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           FPP_Melee;                                         // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          BoltAction;                                        // 0x0410(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_411[0xF];                                      // 0x0411(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             FPP_ADSWeaponOffsetTransform;                      // 0x0420(0x0030)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          UseSeperateADSOffsets;                             // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void OnInstantBulletHit(const struct FHitResult& Hit, float DmgMultiplier, class APawn* Instigator_0);
	void GetSpawnBulletInfo(struct FVector* SpawnLocation, struct FVector* Velocity, struct FRotator* SpawnRotation);
	void GetLineTraceInfo(struct FVector* TraceStart, struct FVector* TraceEnd);
	void FireInstant(const struct FVector& TraceStart, const struct FVector& ForwardVector, class APawn* Instigator_0, float Spread);
	void CheckBulletPath(bool* NewParam);
	void SpawnBullet(const struct FVector& SpawnLocation, const struct FVector& BulletVelocity_0, class APawn* Instigator_0, const struct FRotator& SpawnRotation, float Spread, bool bClientSideOnly);
	void ReduceAmmo();
	void Server_FireBullet(const struct FVector& SpawnLocation, const struct FVector& BulletVelocity_0, class APawn* Instigator_0, const struct FRotator& SpawnRotation, float Spread);
	void Server_FireInstantBullet(const struct FVector& TraceStart, const struct FVector& ForwardVector, class APawn* Instigator_0, float Spread);
	void Server_InstantBulletHit(const struct FHitResult& Hit, float DmgMultiplier, class APawn* Instigator_0);
	void Shoot(float Spread);
	void Multicast_PlayShotEffects();
	void LocalPlayEffects();
	void Multicast_PlayImpacEffects(const struct FHitResult& HitResult);
	void Server_PlayImpactEffects(const struct FHitResult& HitResult);
	void Server_PlayShotEffects();
	void Multicast_PlayMultipleImpactEffects(const TArray<struct FHitResult>& HitResults);
	void Server_PlayHitImpactEffect(const TArray<struct FHitResult>& HitResults);
	void PlayShotShake();
	void PlayWeaponFireSound();
	void PlayWeaponShotAnimation();
	void ReceiveBeginPlay();
	void ReloadWeapon(int32 AddedAmmo);
	void ChangeFiringMode();
	void HoldBreath();
	void StopHoldBreath();
	void ScopeZoom(bool Up);
	void UpdateWeaponVisibility(bool bThirdPerson);
	void SetFiringMode(EFiringMode NewParam);
	void OnBeginAiming();
	void OnStopAiming();
	void Server_SetActualAmmo(int32 ActualAmmo_0);
	void ADS();
	void StopADS();
	void ExecuteUbergraph_BP_BaseWeapon(int32 EntryPoint);
	void PlayEffects(const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BaseWeapon_C">();
	}
	static class ABP_BaseWeapon_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BaseWeapon_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_BaseWeapon_C) == 0x000010, "Wrong alignment on ABP_BaseWeapon_C");
static_assert(sizeof(ABP_BaseWeapon_C) == 0x000460, "Wrong size on ABP_BaseWeapon_C");
static_assert(offsetof(ABP_BaseWeapon_C, UberGraphFrame) == 0x000220, "Member 'ABP_BaseWeapon_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, MeshFPP) == 0x000228, "Member 'ABP_BaseWeapon_C::MeshFPP' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, MeshTPP) == 0x000230, "Member 'ABP_BaseWeapon_C::MeshTPP' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, Scene) == 0x000238, "Member 'ABP_BaseWeapon_C::Scene' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, AmmoPerMag) == 0x000240, "Member 'ABP_BaseWeapon_C::AmmoPerMag' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ActualAmmo) == 0x000244, "Member 'ABP_BaseWeapon_C::ActualAmmo' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, Damage) == 0x000248, "Member 'ABP_BaseWeapon_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FireRate) == 0x00024C, "Member 'ABP_BaseWeapon_C::FireRate' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, WeapongRange) == 0x000250, "Member 'ABP_BaseWeapon_C::WeapongRange' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, WeaponSpread) == 0x000254, "Member 'ABP_BaseWeapon_C::WeaponSpread' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, WeaponVerticalRecoilMax) == 0x000258, "Member 'ABP_BaseWeapon_C::WeaponVerticalRecoilMax' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, WeaponVerticalRecoilMin) == 0x00025C, "Member 'ABP_BaseWeapon_C::WeaponVerticalRecoilMin' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, WeaponHorizontalRecoilMax) == 0x000260, "Member 'ABP_BaseWeapon_C::WeaponHorizontalRecoilMax' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, WeaponHorizontalRecoilMin) == 0x000264, "Member 'ABP_BaseWeapon_C::WeaponHorizontalRecoilMin' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, AimingSpread) == 0x000268, "Member 'ABP_BaseWeapon_C::AimingSpread' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, AmmoType) == 0x00026C, "Member 'ABP_BaseWeapon_C::AmmoType' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, PickUpWeaponAmmo) == 0x000270, "Member 'ABP_BaseWeapon_C::PickUpWeaponAmmo' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, InitialValues) == 0x000274, "Member 'ABP_BaseWeapon_C::InitialValues' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, bHitScanBullets) == 0x000275, "Member 'ABP_BaseWeapon_C::bHitScanBullets' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, bShotgun) == 0x000276, "Member 'ABP_BaseWeapon_C::bShotgun' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ShotgunProjectilesPerShot) == 0x000278, "Member 'ABP_BaseWeapon_C::ShotgunProjectilesPerShot' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, NoAmmoFireSound) == 0x000280, "Member 'ABP_BaseWeapon_C::NoAmmoFireSound' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FireSound) == 0x000288, "Member 'ABP_BaseWeapon_C::FireSound' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, MeleeDamageType) == 0x000290, "Member 'ABP_BaseWeapon_C::MeleeDamageType' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, DamageType) == 0x000298, "Member 'ABP_BaseWeapon_C::DamageType' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FiringModes) == 0x0002A0, "Member 'ABP_BaseWeapon_C::FiringModes' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ActualFiringMode) == 0x0002B0, "Member 'ABP_BaseWeapon_C::ActualFiringMode' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, BulletsPerBurst) == 0x0002B4, "Member 'ABP_BaseWeapon_C::BulletsPerBurst' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, AimingFOV) == 0x0002B8, "Member 'ABP_BaseWeapon_C::AimingFOV' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, AimingInterSpeed) == 0x0002BC, "Member 'ABP_BaseWeapon_C::AimingInterSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, WeaponName) == 0x0002C0, "Member 'ABP_BaseWeapon_C::WeaponName' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, HeadshotMultiplier) == 0x0002C4, "Member 'ABP_BaseWeapon_C::HeadshotMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, BulletVelocity) == 0x0002C8, "Member 'ABP_BaseWeapon_C::BulletVelocity' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FPP_EquipWeaponMontage) == 0x0002D0, "Member 'ABP_BaseWeapon_C::FPP_EquipWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FPP_UnequipWeaponMontage) == 0x0002D8, "Member 'ABP_BaseWeapon_C::FPP_UnequipWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, RecoverInterpSpeed) == 0x0002E0, "Member 'ABP_BaseWeapon_C::RecoverInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, RecoilInterpSpeed) == 0x0002E4, "Member 'ABP_BaseWeapon_C::RecoilInterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, BurstFireRate) == 0x0002E8, "Member 'ABP_BaseWeapon_C::BurstFireRate' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, MuzzleFlashEmitter) == 0x0002F0, "Member 'ABP_BaseWeapon_C::MuzzleFlashEmitter' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FireShake) == 0x0002F8, "Member 'ABP_BaseWeapon_C::FireShake' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ImpactDecal) == 0x000300, "Member 'ABP_BaseWeapon_C::ImpactDecal' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ImpactDefaultEmitter) == 0x000308, "Member 'ABP_BaseWeapon_C::ImpactDefaultEmitter' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ImpactBloodEmitter) == 0x000310, "Member 'ABP_BaseWeapon_C::ImpactBloodEmitter' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ImpactDefaultCue) == 0x000318, "Member 'ABP_BaseWeapon_C::ImpactDefaultCue' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ImpactFleshSound) == 0x000320, "Member 'ABP_BaseWeapon_C::ImpactFleshSound' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FPP_FireWeaponMontage) == 0x000328, "Member 'ABP_BaseWeapon_C::FPP_FireWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FPP_ReloadWeaponMontage) == 0x000330, "Member 'ABP_BaseWeapon_C::FPP_ReloadWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ShotAnimation) == 0x000338, "Member 'ABP_BaseWeapon_C::ShotAnimation' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, TPP_EquipWeaponMontage) == 0x000340, "Member 'ABP_BaseWeapon_C::TPP_EquipWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, TPP_UnequipWeaponMontage) == 0x000348, "Member 'ABP_BaseWeapon_C::TPP_UnequipWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, TPP_FireWeaponMontageLoop) == 0x000350, "Member 'ABP_BaseWeapon_C::TPP_FireWeaponMontageLoop' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, TPP_ReloadWeaponMontage) == 0x000358, "Member 'ABP_BaseWeapon_C::TPP_ReloadWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, ReloadWeaponAnimation) == 0x000360, "Member 'ABP_BaseWeapon_C::ReloadWeaponAnimation' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FPP_FireIronsightWeaponMontage) == 0x000368, "Member 'ABP_BaseWeapon_C::FPP_FireIronsightWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, WeaponType) == 0x000370, "Member 'ABP_BaseWeapon_C::WeaponType' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FPP_WeaponOffsetTransform) == 0x000380, "Member 'ABP_BaseWeapon_C::FPP_WeaponOffsetTransform' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, BreathingShake) == 0x0003B0, "Member 'ABP_BaseWeapon_C::BreathingShake' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, TPP_WeaponOffsetTransform) == 0x0003C0, "Member 'ABP_BaseWeapon_C::TPP_WeaponOffsetTransform' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, bShouldHideCrossHairInTPP) == 0x0003F0, "Member 'ABP_BaseWeapon_C::bShouldHideCrossHairInTPP' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, NoiseRange) == 0x0003F4, "Member 'ABP_BaseWeapon_C::NoiseRange' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, NoiseLoudness) == 0x0003F8, "Member 'ABP_BaseWeapon_C::NoiseLoudness' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, TPP_FireWeaponMontage) == 0x000400, "Member 'ABP_BaseWeapon_C::TPP_FireWeaponMontage' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FPP_Melee) == 0x000408, "Member 'ABP_BaseWeapon_C::FPP_Melee' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, BoltAction) == 0x000410, "Member 'ABP_BaseWeapon_C::BoltAction' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, FPP_ADSWeaponOffsetTransform) == 0x000420, "Member 'ABP_BaseWeapon_C::FPP_ADSWeaponOffsetTransform' has a wrong offset!");
static_assert(offsetof(ABP_BaseWeapon_C, UseSeperateADSOffsets) == 0x000450, "Member 'ABP_BaseWeapon_C::UseSeperateADSOffsets' has a wrong offset!");

}

