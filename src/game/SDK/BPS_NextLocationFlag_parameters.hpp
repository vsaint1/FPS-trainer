#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPS_NextLocationFlag

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BPS_NextLocationFlag.BPS_NextLocationFlag_C.TeamHasTheFlag
// 0x0010 (0x0010 - 0x0000)
struct BPS_NextLocationFlag_C_TeamHasTheFlag final
{
public:
	bool                                          bTeamHasTheFlag;                                   // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseFlag_C*                         CallFunc_GetFlag_Flag;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPS_NextLocationFlag_C_TeamHasTheFlag) == 0x000008, "Wrong alignment on BPS_NextLocationFlag_C_TeamHasTheFlag");
static_assert(sizeof(BPS_NextLocationFlag_C_TeamHasTheFlag) == 0x000010, "Wrong size on BPS_NextLocationFlag_C_TeamHasTheFlag");
static_assert(offsetof(BPS_NextLocationFlag_C_TeamHasTheFlag, bTeamHasTheFlag) == 0x000000, "Member 'BPS_NextLocationFlag_C_TeamHasTheFlag::bTeamHasTheFlag' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_TeamHasTheFlag, CallFunc_Not_PreBool_ReturnValue) == 0x000001, "Member 'BPS_NextLocationFlag_C_TeamHasTheFlag::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_TeamHasTheFlag, CallFunc_GetFlag_Flag) == 0x000008, "Member 'BPS_NextLocationFlag_C_TeamHasTheFlag::CallFunc_GetFlag_Flag' has a wrong offset!");

// Function BPS_NextLocationFlag.BPS_NextLocationFlag_C.GetFlag
// 0x0020 (0x0020 - 0x0000)
struct BPS_NextLocationFlag_C_GetFlag final
{
public:
	bool                                          bTeam;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseFlag_C*                         Flag;                                              // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseFlag_C*                         K2Node_Select_Default;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPS_NextLocationFlag_C_GetFlag) == 0x000008, "Wrong alignment on BPS_NextLocationFlag_C_GetFlag");
static_assert(sizeof(BPS_NextLocationFlag_C_GetFlag) == 0x000020, "Wrong size on BPS_NextLocationFlag_C_GetFlag");
static_assert(offsetof(BPS_NextLocationFlag_C_GetFlag, bTeam) == 0x000000, "Member 'BPS_NextLocationFlag_C_GetFlag::bTeam' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_GetFlag, Flag) == 0x000008, "Member 'BPS_NextLocationFlag_C_GetFlag::Flag' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_GetFlag, Temp_bool_Variable) == 0x000010, "Member 'BPS_NextLocationFlag_C_GetFlag::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_GetFlag, K2Node_Select_Default) == 0x000018, "Member 'BPS_NextLocationFlag_C_GetFlag::K2Node_Select_Default' has a wrong offset!");

// Function BPS_NextLocationFlag.BPS_NextLocationFlag_C.EnemyHasTheFlag
// 0x0010 (0x0010 - 0x0000)
struct BPS_NextLocationFlag_C_EnemyHasTheFlag final
{
public:
	bool                                          EnemyHasTheFlag_0;                                 // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseFlag_C*                         CallFunc_GetFlag_Flag;                             // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPS_NextLocationFlag_C_EnemyHasTheFlag) == 0x000008, "Wrong alignment on BPS_NextLocationFlag_C_EnemyHasTheFlag");
static_assert(sizeof(BPS_NextLocationFlag_C_EnemyHasTheFlag) == 0x000010, "Wrong size on BPS_NextLocationFlag_C_EnemyHasTheFlag");
static_assert(offsetof(BPS_NextLocationFlag_C_EnemyHasTheFlag, EnemyHasTheFlag_0) == 0x000000, "Member 'BPS_NextLocationFlag_C_EnemyHasTheFlag::EnemyHasTheFlag_0' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_EnemyHasTheFlag, CallFunc_GetFlag_Flag) == 0x000008, "Member 'BPS_NextLocationFlag_C_EnemyHasTheFlag::CallFunc_GetFlag_Flag' has a wrong offset!");

// Function BPS_NextLocationFlag.BPS_NextLocationFlag_C.SelectObjective
// 0x00B8 (0x00B8 - 0x0000)
struct BPS_NextLocationFlag_C_SelectObjective final
{
public:
	bool                                          Team_0;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseFlag_C*                         CallFunc_GetFlag_Flag;                             // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BaseFlag_C*                         CallFunc_GetFlag_Flag_1;                           // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetDistanceTo_ReturnValue;                // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Less_FloatFloat_ReturnValue;              // 0x002D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation; // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue; // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_1; // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_1; // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_TeamHasTheFlag_bTeamHasTheFlag;           // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseFlag_C*                         CallFunc_GetFlag_Flag_2;                           // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseFlag_C*                         CallFunc_GetFlag_Flag_3;                           // 0x0078(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EnemyHasTheFlag_EnemyHasTheFlag;          // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_81[0x3];                                       // 0x0081(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_2;        // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_2; // 0x0090(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_2; // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_CaptureTheFlag_GS_C*                K2Node_DynamicCast_AsBP_Capture_the_Flag_GS;       // 0x00A8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPS_NextLocationFlag_C_SelectObjective) == 0x000008, "Wrong alignment on BPS_NextLocationFlag_C_SelectObjective");
static_assert(sizeof(BPS_NextLocationFlag_C_SelectObjective) == 0x0000B8, "Wrong size on BPS_NextLocationFlag_C_SelectObjective");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, Team_0) == 0x000000, "Member 'BPS_NextLocationFlag_C_SelectObjective::Team_0' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, ControlledPawn) == 0x000008, "Member 'BPS_NextLocationFlag_C_SelectObjective::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_Not_PreBool_ReturnValue) == 0x000010, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_Not_PreBool_ReturnValue_1) == 0x000011, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_GetFlag_Flag) == 0x000018, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_GetFlag_Flag' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_GetFlag_Flag_1) == 0x000020, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_GetFlag_Flag_1' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_GetDistanceTo_ReturnValue) == 0x000028, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_GetDistanceTo_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x00002C, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_Less_FloatFloat_ReturnValue) == 0x00002D, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_Less_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x00003C, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation) == 0x000048, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue) == 0x000054, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_1) == 0x000058, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_1' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_1) == 0x000064, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_TeamHasTheFlag_bTeamHasTheFlag) == 0x000065, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_TeamHasTheFlag_bTeamHasTheFlag' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_GetFlag_Flag_2) == 0x000068, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_GetFlag_Flag_2' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_Not_PreBool_ReturnValue_2) == 0x000070, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_GetFlag_Flag_3) == 0x000078, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_GetFlag_Flag_3' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_EnemyHasTheFlag_EnemyHasTheFlag) == 0x000080, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_EnemyHasTheFlag_EnemyHasTheFlag' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetActorLocation_ReturnValue_2) == 0x000084, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetActorLocation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_2) == 0x000090, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetRandomReachablePointInRadius_RandomLocation_2' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_2) == 0x00009C, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_K2_GetRandomReachablePointInRadius_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, CallFunc_GetGameState_ReturnValue) == 0x0000A0, "Member 'BPS_NextLocationFlag_C_SelectObjective::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, K2Node_DynamicCast_AsBP_Capture_the_Flag_GS) == 0x0000A8, "Member 'BPS_NextLocationFlag_C_SelectObjective::K2Node_DynamicCast_AsBP_Capture_the_Flag_GS' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_SelectObjective, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'BPS_NextLocationFlag_C_SelectObjective::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BPS_NextLocationFlag.BPS_NextLocationFlag_C.ReceiveTickAI
// 0x0018 (0x0018 - 0x0000)
struct BPS_NextLocationFlag_C_ReceiveTickAI final
{
public:
	class AAIController*                          OwnerController;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  ControlledPawn;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BPS_NextLocationFlag_C_ReceiveTickAI) == 0x000008, "Wrong alignment on BPS_NextLocationFlag_C_ReceiveTickAI");
static_assert(sizeof(BPS_NextLocationFlag_C_ReceiveTickAI) == 0x000018, "Wrong size on BPS_NextLocationFlag_C_ReceiveTickAI");
static_assert(offsetof(BPS_NextLocationFlag_C_ReceiveTickAI, OwnerController) == 0x000000, "Member 'BPS_NextLocationFlag_C_ReceiveTickAI::OwnerController' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ReceiveTickAI, ControlledPawn) == 0x000008, "Member 'BPS_NextLocationFlag_C_ReceiveTickAI::ControlledPawn' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ReceiveTickAI, DeltaSeconds) == 0x000010, "Member 'BPS_NextLocationFlag_C_ReceiveTickAI::DeltaSeconds' has a wrong offset!");

// Function BPS_NextLocationFlag.BPS_NextLocationFlag_C.ExecuteUbergraph_BPS_NextLocationFlag
// 0x0040 (0x0040 - 0x0000)
struct BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AAIController*                          K2Node_Event_OwnerController;                      // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  K2Node_Event_ControlledPawn;                       // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPlayerState_C>       K2Node_DynamicCast_AsI_Player_State;               // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetTeam_Team;                             // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Conv_IntToBool_ReturnValue;               // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag) == 0x000008, "Wrong alignment on BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag");
static_assert(sizeof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag) == 0x000040, "Wrong size on BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag");
static_assert(offsetof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag, EntryPoint) == 0x000000, "Member 'BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag::EntryPoint' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag, K2Node_Event_OwnerController) == 0x000008, "Member 'BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag::K2Node_Event_OwnerController' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag, K2Node_Event_ControlledPawn) == 0x000010, "Member 'BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag::K2Node_Event_ControlledPawn' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag, K2Node_Event_DeltaSeconds) == 0x000018, "Member 'BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag, K2Node_DynamicCast_AsI_Player_State) == 0x000020, "Member 'BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag::K2Node_DynamicCast_AsI_Player_State' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag, CallFunc_GetTeam_Team) == 0x000034, "Member 'BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag::CallFunc_GetTeam_Team' has a wrong offset!");
static_assert(offsetof(BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag, CallFunc_Conv_IntToBool_ReturnValue) == 0x000038, "Member 'BPS_NextLocationFlag_C_ExecuteUbergraph_BPS_NextLocationFlag::CallFunc_Conv_IntToBool_ReturnValue' has a wrong offset!");

}

