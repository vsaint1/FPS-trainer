#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_GameInstance

#include "Basic.hpp"

#include "E_AI_Difficulty_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_GameInstance.BP_GameInstance_C
// 0x0020 (0x01C8 - 0x01A8)
class UBP_GameInstance_C final : public UGameInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x01A8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	int32                                         MaxPlayer;                                         // 0x01B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bAllowBots;                                        // 0x01B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAllowFriendlyFire;                                // 0x01B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1B6[0x2];                                      // 0x01B6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamABots;                                         // 0x01B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamBBots;                                         // 0x01BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PointsToWin;                                       // 0x01C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	E_AI_Difficulty                               AIDifficulty;                                      // 0x01C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_BP_GameInstance(int32 EntryPoint);
	void JoinServer(const struct FBlueprintSessionResult& SessionToJoin);
	void DestroySessionCaller(class APlayerController* PlayerController);
	void OnSuccess_5662C0584E0AE12FB90219B012FE5C60();
	void OnFailure_5662C0584E0AE12FB90219B012FE5C60();
	void OnSuccess_FEB1A1304CDE2ED6CC6C06A948930758();
	void OnFailure_FEB1A1304CDE2ED6CC6C06A948930758();
	void NetErrorToString(ENetworkFailure Failure_Type, class FString* NewParam);
	void TravelErrorToString(ETravelFailure Travel_Error, class FString* OutString);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_GameInstance_C">();
	}
	static class UBP_GameInstance_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_GameInstance_C>();
	}
};
static_assert(alignof(UBP_GameInstance_C) == 0x000008, "Wrong alignment on UBP_GameInstance_C");
static_assert(sizeof(UBP_GameInstance_C) == 0x0001C8, "Wrong size on UBP_GameInstance_C");
static_assert(offsetof(UBP_GameInstance_C, UberGraphFrame) == 0x0001A8, "Member 'UBP_GameInstance_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, MaxPlayer) == 0x0001B0, "Member 'UBP_GameInstance_C::MaxPlayer' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, bAllowBots) == 0x0001B4, "Member 'UBP_GameInstance_C::bAllowBots' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, bAllowFriendlyFire) == 0x0001B5, "Member 'UBP_GameInstance_C::bAllowFriendlyFire' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, TeamABots) == 0x0001B8, "Member 'UBP_GameInstance_C::TeamABots' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, TeamBBots) == 0x0001BC, "Member 'UBP_GameInstance_C::TeamBBots' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, PointsToWin) == 0x0001C0, "Member 'UBP_GameInstance_C::PointsToWin' has a wrong offset!");
static_assert(offsetof(UBP_GameInstance_C, AIDifficulty) == 0x0001C4, "Member 'UBP_GameInstance_C::AIDifficulty' has a wrong offset!");

}

