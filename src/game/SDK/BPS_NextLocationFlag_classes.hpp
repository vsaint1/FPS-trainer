#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPS_NextLocationFlag

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "AIModule_classes.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BPS_NextLocationFlag.BPS_NextLocationFlag_C
// 0x0048 (0x00E0 - 0x0098)
class UBPS_NextLocationFlag_C final : public UBTService_BlueprintBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct FBlackboardKeySelector                 Vectorkey;                                         // 0x00A0(0x0028)(Edit, BlueprintVisible)
	class ABP_CaptureTheFlag_GS_C*                GS;                                                // 0x00C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash)
	class APawn*                                  Controlled_Pawn;                                   // 0x00D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Team;                                              // 0x00D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void TeamHasTheFlag(bool* bTeamHasTheFlag);
	void GetFlag(bool bTeam, class ABP_BaseFlag_C** Flag);
	void EnemyHasTheFlag(bool* EnemyHasTheFlag_0);
	void SelectObjective(bool Team_0, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ExecuteUbergraph_BPS_NextLocationFlag(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BPS_NextLocationFlag_C">();
	}
	static class UBPS_NextLocationFlag_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBPS_NextLocationFlag_C>();
	}
};
static_assert(alignof(UBPS_NextLocationFlag_C) == 0x000008, "Wrong alignment on UBPS_NextLocationFlag_C");
static_assert(sizeof(UBPS_NextLocationFlag_C) == 0x0000E0, "Wrong size on UBPS_NextLocationFlag_C");
static_assert(offsetof(UBPS_NextLocationFlag_C, UberGraphFrame) == 0x000098, "Member 'UBPS_NextLocationFlag_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UBPS_NextLocationFlag_C, Vectorkey) == 0x0000A0, "Member 'UBPS_NextLocationFlag_C::Vectorkey' has a wrong offset!");
static_assert(offsetof(UBPS_NextLocationFlag_C, GS) == 0x0000C8, "Member 'UBPS_NextLocationFlag_C::GS' has a wrong offset!");
static_assert(offsetof(UBPS_NextLocationFlag_C, Controlled_Pawn) == 0x0000D0, "Member 'UBPS_NextLocationFlag_C::Controlled_Pawn' has a wrong offset!");
static_assert(offsetof(UBPS_NextLocationFlag_C, Team) == 0x0000D8, "Member 'UBPS_NextLocationFlag_C::Team' has a wrong offset!");

}

