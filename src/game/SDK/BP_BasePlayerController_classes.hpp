#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BasePlayerController

#include "Basic.hpp"

#include "EPlayerClass_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EPerks_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BasePlayerController.BP_BasePlayerController_C
// 0x0140 (0x06B0 - 0x0570)
class ABP_BasePlayerController_C final : public APlayerController
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0570(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	bool                                          bHorizontalInverted;                               // 0x0578(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bVericalInverted;                                  // 0x0579(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bIsInThirdPerson;                                  // 0x057A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bReadyToSpawn;                                     // 0x057B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         MasterVolume;                                      // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MusicVolume;                                       // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CharactersVolume;                                  // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         AmbientVolume;                                     // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         WeaponVolume;                                      // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bShowFps;                                          // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SenderName;                                        // 0x0598(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   SenderText;                                        // 0x05B0(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	TArray<class ABP_PlayerState_C*>              SemiSortedScoreTeamA;                              // 0x05C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerState_C*>              SemiSortedScoreTeamB;                              // 0x05D8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class FText                                   SteamName;                                         // 0x05E8(0x0018)(Edit, BlueprintVisible, Net, DisableEditOnInstance)
	int32                                         TimeLeft;                                          // 0x0600(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_CharacterSelection_C*               CharacterSelectionRef;                             // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_Controls_C*                         ShowControlsWBRef;                                 // 0x0610(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            BP_HUD;                                            // 0x0618(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bSettingsLoaded;                                   // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 PrimaryWeaponClass;                                // 0x0628(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 SecondaryWeaponClass;                              // 0x0630(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 UtilityClass;                                      // 0x0638(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPlayerClass                                  Class_0;                                           // 0x0640(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EPerks                                        Perks;                                             // 0x0641(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_642[0x2];                                      // 0x0642(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MouseSensitivity_;                                 // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZoomSensitivity;                                   // 0x0648(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Chat_C*                             ChatRef;                                           // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         UIVolume;                                          // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65C[0x4];                                      // 0x065C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_InGameMenu_C*                       InGameMenuRef;                                     // 0x0660(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            PlayerScoresWidgetRef;                             // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_SettingsMenu_C*                     SettingsMenuRef;                                   // 0x0670(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWB_KilledBy_C*                         KilledByWidgetRef;                                 // 0x0678(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            EndGameScoresRef;                                  // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UUserWidget*                            GameStateWidget;                                   // 0x0688(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bInfiniteClip;                                     // 0x0690(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bInfiniteExplosives;                               // 0x0691(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bNoAbilityCooldownEnable;                          // 0x0692(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_693[0x5];                                      // 0x0693(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UBP_CheatManager_C*                     BP_CheatManager;                                   // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanNotSwapTeam;                                    // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6A1[0x3];                                      // 0x06A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MotionBlur;                                        // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CameraFOV;                                         // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ToggleSprint;                                      // 0x06AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleCrouch;                                      // 0x06AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleADS;                                         // 0x06AE(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          MessagePopups;                                     // 0x06AF(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void Server_AddToReadyToSpawnList();
	void Server_SetClass(EPlayerClass PlayeerClass);
	void Kicked();
	void ReceiveBeginPlay();
	void Server_KillPawn();
	void Server_SetPerks(EPerks Perk);
	void Server_DestroyWeapon(class AActor* Actor);
	void Server_SetSteamName();
	void Server_SetPrimaryWeapon(const class UClass*& PrimaryWeapon);
	void Server_SetSecondaryWeapon(const class UClass*& SecondaryWeapon);
	void Server_SetUtilityType(class UClass* UtilityType);
	void OnSuicide();
	void Client_InitScoreList();
	void SetPerspective(bool IsInTPP);
	void Client_SetControlRotation(const struct FRotator& NewRotation);
	void K2_OnReset();
	void SetTeam(int32 NewTeam);
	void CheckTeamBalance();
	void ToggleTeamText();
	void ExecuteUbergraph_BP_BasePlayerController(int32 EntryPoint);
	void IsAnyMenuOpen(bool* bTrue);
	void SetNoCooldownAbilities(bool bNoAbilityCooldown);
	void SetInfiniteExplosives(bool bInfiniteExplosives_0);
	void SetInfiniteClip(bool bInfiniteClip_0);
	void GetPlayerName(class FText* PlayerName);
	void LoadSettings();
	void InpActEvt_Alt_Two_K2Node_InputKeyEvent_3(const struct FKey& Key);
	void InpActEvt_Alt_Four_K2Node_InputKeyEvent_2(const struct FKey& Key);
	void InpActEvt_Alt_Three_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_Alt_One_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void InpActEvt_SettingMenu_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_GlobalChat_K2Node_InputActionEvent_2(const struct FKey& Key);
	void InpActEvt_TeamChat_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Chat_K2Node_InputActionEvent_0(const struct FKey& Key);
	void OnFailure_8B36B7024B2396B3739819A2F6B7B374();
	void OnSuccess_8B36B7024B2396B3739819A2F6B7B374();
	void Create_HUD();
	void CloseScores();
	void OpenScores();
	void ShowKilledByWidget(const class FText& KillerName, float KillerHealth, EPlayerClass KillerClass, const class UDamageType* DamageType);
	void CleanWidgets();
	void CloseControlsWidget();
	void Client_CloseCharacterSelection();
	void Client_RemoveAllWidgets();
	void Client_ShowCharacterSelectionWidget(bool Instant);
	void Client_CreateChatWidget();
	void Client_ShowKillingSpreeMessage();
	void Client_UpdateKillFeed(class APlayerState* Kill, class APlayerState* Victi, const class UDamageType* DamageType, class APlayerState* Assist, bool bHeadshot);
	void ShowPlayerScores();
	void ShowSettingsMenu(bool InGame);
	void CreateKilledByWidget(const class FText& KillerName, float KillerHealth, EPlayerClass KillerClass, const class UDamageType* DamageType);
	void Client_ShowEndGameMenu();
	void ChangeVolume(float AudioVolume, class USoundClass* Sound_Class);
	void CreateGameStateWidget();
	void Client_AddWidgetByClass(class UClass* NewParam);
	void AutoBalanceOnDeath();
	void Client_UpdateChat(const class FText& Sender, const class FText& Text, bool bTeamChat);
	void Server_GetChatMessage(const class FText& TextToSend, bool bTeamChat, class APlayerController* SenderPC);
	void SendServerMessage(const class FText& Message);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);

	void HasNoAbilityCooldown(bool* bNoAbilityCooldown) const;
	void HasInfiniteExplosives(bool* bInfiniteExplosives_0) const;
	void HasInfiniteClip(bool* bInfiniteClip_0) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BasePlayerController_C">();
	}
	static class ABP_BasePlayerController_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BasePlayerController_C>();
	}
};
static_assert(alignof(ABP_BasePlayerController_C) == 0x000008, "Wrong alignment on ABP_BasePlayerController_C");
static_assert(sizeof(ABP_BasePlayerController_C) == 0x0006B0, "Wrong size on ABP_BasePlayerController_C");
static_assert(offsetof(ABP_BasePlayerController_C, UberGraphFrame) == 0x000570, "Member 'ABP_BasePlayerController_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bHorizontalInverted) == 0x000578, "Member 'ABP_BasePlayerController_C::bHorizontalInverted' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bVericalInverted) == 0x000579, "Member 'ABP_BasePlayerController_C::bVericalInverted' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bIsInThirdPerson) == 0x00057A, "Member 'ABP_BasePlayerController_C::bIsInThirdPerson' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bReadyToSpawn) == 0x00057B, "Member 'ABP_BasePlayerController_C::bReadyToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, MasterVolume) == 0x00057C, "Member 'ABP_BasePlayerController_C::MasterVolume' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, MusicVolume) == 0x000580, "Member 'ABP_BasePlayerController_C::MusicVolume' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, CharactersVolume) == 0x000584, "Member 'ABP_BasePlayerController_C::CharactersVolume' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, AmbientVolume) == 0x000588, "Member 'ABP_BasePlayerController_C::AmbientVolume' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, WeaponVolume) == 0x00058C, "Member 'ABP_BasePlayerController_C::WeaponVolume' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bShowFps) == 0x000590, "Member 'ABP_BasePlayerController_C::bShowFps' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, SenderName) == 0x000598, "Member 'ABP_BasePlayerController_C::SenderName' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, SenderText) == 0x0005B0, "Member 'ABP_BasePlayerController_C::SenderText' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, SemiSortedScoreTeamA) == 0x0005C8, "Member 'ABP_BasePlayerController_C::SemiSortedScoreTeamA' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, SemiSortedScoreTeamB) == 0x0005D8, "Member 'ABP_BasePlayerController_C::SemiSortedScoreTeamB' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, SteamName) == 0x0005E8, "Member 'ABP_BasePlayerController_C::SteamName' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, TimeLeft) == 0x000600, "Member 'ABP_BasePlayerController_C::TimeLeft' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, CharacterSelectionRef) == 0x000608, "Member 'ABP_BasePlayerController_C::CharacterSelectionRef' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, ShowControlsWBRef) == 0x000610, "Member 'ABP_BasePlayerController_C::ShowControlsWBRef' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, BP_HUD) == 0x000618, "Member 'ABP_BasePlayerController_C::BP_HUD' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bSettingsLoaded) == 0x000620, "Member 'ABP_BasePlayerController_C::bSettingsLoaded' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, PrimaryWeaponClass) == 0x000628, "Member 'ABP_BasePlayerController_C::PrimaryWeaponClass' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, SecondaryWeaponClass) == 0x000630, "Member 'ABP_BasePlayerController_C::SecondaryWeaponClass' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, UtilityClass) == 0x000638, "Member 'ABP_BasePlayerController_C::UtilityClass' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, Class_0) == 0x000640, "Member 'ABP_BasePlayerController_C::Class_0' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, Perks) == 0x000641, "Member 'ABP_BasePlayerController_C::Perks' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, MouseSensitivity_) == 0x000644, "Member 'ABP_BasePlayerController_C::MouseSensitivity_' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, ZoomSensitivity) == 0x000648, "Member 'ABP_BasePlayerController_C::ZoomSensitivity' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, ChatRef) == 0x000650, "Member 'ABP_BasePlayerController_C::ChatRef' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, UIVolume) == 0x000658, "Member 'ABP_BasePlayerController_C::UIVolume' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, InGameMenuRef) == 0x000660, "Member 'ABP_BasePlayerController_C::InGameMenuRef' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, PlayerScoresWidgetRef) == 0x000668, "Member 'ABP_BasePlayerController_C::PlayerScoresWidgetRef' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, SettingsMenuRef) == 0x000670, "Member 'ABP_BasePlayerController_C::SettingsMenuRef' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, KilledByWidgetRef) == 0x000678, "Member 'ABP_BasePlayerController_C::KilledByWidgetRef' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, EndGameScoresRef) == 0x000680, "Member 'ABP_BasePlayerController_C::EndGameScoresRef' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, GameStateWidget) == 0x000688, "Member 'ABP_BasePlayerController_C::GameStateWidget' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bInfiniteClip) == 0x000690, "Member 'ABP_BasePlayerController_C::bInfiniteClip' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bInfiniteExplosives) == 0x000691, "Member 'ABP_BasePlayerController_C::bInfiniteExplosives' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, bNoAbilityCooldownEnable) == 0x000692, "Member 'ABP_BasePlayerController_C::bNoAbilityCooldownEnable' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, BP_CheatManager) == 0x000698, "Member 'ABP_BasePlayerController_C::BP_CheatManager' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, CanNotSwapTeam) == 0x0006A0, "Member 'ABP_BasePlayerController_C::CanNotSwapTeam' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, MotionBlur) == 0x0006A4, "Member 'ABP_BasePlayerController_C::MotionBlur' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, CameraFOV) == 0x0006A8, "Member 'ABP_BasePlayerController_C::CameraFOV' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, ToggleSprint) == 0x0006AC, "Member 'ABP_BasePlayerController_C::ToggleSprint' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, ToggleCrouch) == 0x0006AD, "Member 'ABP_BasePlayerController_C::ToggleCrouch' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, ToggleADS) == 0x0006AE, "Member 'ABP_BasePlayerController_C::ToggleADS' has a wrong offset!");
static_assert(offsetof(ABP_BasePlayerController_C, MessagePopups) == 0x0006AF, "Member 'ABP_BasePlayerController_C::MessagePopups' has a wrong offset!");

}

