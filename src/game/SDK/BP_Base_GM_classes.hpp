#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Base_GM

#include "Basic.hpp"

#include "EPlayerClass_structs.hpp"
#include "E_AI_Difficulty_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Base_GM.BP_Base_GM_C
// 0x00D0 (0x03D8 - 0x0308)
class ABP_Base_GM_C : public AGameMode
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0308(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0310(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         TimeDilationTimeline_TimeDilation_4E0F90B64A3A72D68D02ACB8159EBC91; // 0x0318(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TimeDilationTimeline__Direction_4E0F90B64A3A72D68D02ACB8159EBC91; // 0x031C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31D[0x3];                                      // 0x031D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TimeDilationTimeline;                              // 0x0320(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerController*>              AllPlayersPCs;                                     // 0x0328(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerSpawn_C*>              PossibleSpawnsA;                                   // 0x0338(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerSpawn_C*>              PossibleSpawnsB;                                   // 0x0348(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bGameOver;                                         // 0x0358(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bAllowBots;                                        // 0x0359(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFriendlyFire;                                     // 0x035A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_35B[0x1];                                      // 0x035B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FriendlyDmgMultiplier;                             // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamABots;                                         // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamBBots;                                         // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class ABP_PlayerSpawn_C*>              PlayerSpawnsA;                                     // 0x0368(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class ABP_PlayerSpawn_C*>              PlayerSpawnsB;                                     // 0x0378(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         MinSpawnEnemyDistance;                             // 0x0388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_38C[0x4];                                      // 0x038C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AController*>                    TeamABotsControllers;                              // 0x0390(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AController*>                    TeamBBotsControllers;                              // 0x03A0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	int32                                         TeamAScore;                                        // 0x03B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamBScore;                                        // 0x03B4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToReset;                                       // 0x03B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3BC[0x4];                                      // 0x03BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_PlayerSpawn_C*                      SelectedSpawn;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UBehaviorTree*                          AI_BehaviorTree;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bUseAutoTeamBalance;                               // 0x03D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	E_AI_Difficulty                               AI_Difficulty;                                     // 0x03D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayerCanChangeTeam;                              // 0x03D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          FFAMode;                                           // 0x03D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor)

public:
	void DestroyGameModeActors();
	void ChooseSpawnDM(TArray<class ABP_PlayerSpawn_C*>& Spawns, int32 Team, TArray<class ABP_PlayerSpawn_C*>* BestSpawns);
	void AutoTeamBalanceUponDeath(class AController* PlayerController);
	void CheckTeamBalance(class AController* PlayerController, bool* NoSwap);
	class UClass* GetDefaultPawnClassForController(class AController* InController);
	void SetGameWithBots(bool bAllowBots_0);
	void SetGameOver(bool bGameOver_0);
	void SetFriedlyFire(bool bFriendlyFire_0);
	void ShowCharacterSelection_Screen(class APlayerController* NewPlayer);
	void SetAIDifficulty();
	void AutoBalanceTeam();
	void AutoTeamBalance_InitialTeam(class AController* PlayerController);
	void HandleFriendlyFireDamage(float Damage, float* DamageToDo);
	void OverrideNumberOfBots(int32 TeamA, int32 TeamB);
	void OnRep_AllPlayersPCs();
	void DestroyBotsPlayerState();
	void UnpossesBots();
	bool ReadyToStartMatch();
	bool ReadyToEndMatch();
	void SendKillFeedInfo(class APlayerState* Kill, class APlayerState* Vic, const class UDamageType* DmgType, class APlayerState* Assist, bool bHeadshot);
	void PossesPawn(class AActor* Pawn, class APlayerController* Controller, const struct FTransform& Transform);
	void ChooseSpawn(TArray<class ABP_PlayerSpawn_C*>& Spawns, int32 Team, TArray<class ABP_PlayerSpawn_C*>* BestSpawns);
	void GetPlayerSpawns(bool FFA);
	void AllPosibleSpawns(class APlayerController* PlayerController);
	void SpawnCharacterPawn(const struct FTransform& SpawnTransform, EPlayerClass Player_Class, class APlayerController* PC);
	void Team_Posible_Spawn(int32 Team, TArray<class ABP_PlayerSpawn_C*>& TeamSpawns, bool Bots, TArray<class ABP_PlayerSpawn_C*>* PosibleSpawn);
	void TimeDilationTimeline__FinishedFunc();
	void TimeDilationTimeline__UpdateFunc();
	void CheckGameOptions();
	void ManageNumberOfBots();
	void SVR_SetPointsToWin(int32 PointsToWin);
	void CreateBots();
	void SpawnBots();
	void SpawnPlayers();
	void SpawnCharacterWithClass(EPlayerClass PlayerClass, class APlayerController* PlayerController);
	void SpawnPlayerClass(EPlayerClass PlayerClass, class APlayerController* PlayerController);
	void Server_KickAllPlayers();
	void Server_RemovePC(class APlayerController* NewParam);
	void K2_OnLogout(class AController* ExitingController);
	void Server_EndGame();
	void HandleStartingNewPlayer(class APlayerController* NewPlayer);
	void ReceiveBeginPlay();
	void ResetGame(float Delay);
	void Server_ResetSpawns();
	void Server_GetKillFeedText(class APlayerState* Kill, class APlayerState* Vic, const class UDamageType* DmgType, class APlayerState* Assist, bool bHeadshot);
	void Server_UpdateScores();
	void InitializeHUDForPlayer(class APlayerController* NewPlayer);
	void Server_SendChatMessage(const class FText& TextToSend);
	void K2_PostLogin(class APlayerController* NewPlayer);
	void K2_OnSetMatchState(class FName NewState);
	void StartSlomo();
	void ExecuteUbergraph_BP_Base_GM(int32 EntryPoint);

	void GetGameWithBots(bool* bGameWithBots) const;
	void IsGameOver(bool* bGameOver_0) const;
	void IsFriendlyFireEnabled(bool* bEnabled) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Base_GM_C">();
	}
	static class ABP_Base_GM_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Base_GM_C>();
	}
};
static_assert(alignof(ABP_Base_GM_C) == 0x000008, "Wrong alignment on ABP_Base_GM_C");
static_assert(sizeof(ABP_Base_GM_C) == 0x0003D8, "Wrong size on ABP_Base_GM_C");
static_assert(offsetof(ABP_Base_GM_C, UberGraphFrame) == 0x000308, "Member 'ABP_Base_GM_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, DefaultSceneRoot) == 0x000310, "Member 'ABP_Base_GM_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TimeDilationTimeline_TimeDilation_4E0F90B64A3A72D68D02ACB8159EBC91) == 0x000318, "Member 'ABP_Base_GM_C::TimeDilationTimeline_TimeDilation_4E0F90B64A3A72D68D02ACB8159EBC91' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TimeDilationTimeline__Direction_4E0F90B64A3A72D68D02ACB8159EBC91) == 0x00031C, "Member 'ABP_Base_GM_C::TimeDilationTimeline__Direction_4E0F90B64A3A72D68D02ACB8159EBC91' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TimeDilationTimeline) == 0x000320, "Member 'ABP_Base_GM_C::TimeDilationTimeline' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, AllPlayersPCs) == 0x000328, "Member 'ABP_Base_GM_C::AllPlayersPCs' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, PossibleSpawnsA) == 0x000338, "Member 'ABP_Base_GM_C::PossibleSpawnsA' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, PossibleSpawnsB) == 0x000348, "Member 'ABP_Base_GM_C::PossibleSpawnsB' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, bGameOver) == 0x000358, "Member 'ABP_Base_GM_C::bGameOver' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, bAllowBots) == 0x000359, "Member 'ABP_Base_GM_C::bAllowBots' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, bFriendlyFire) == 0x00035A, "Member 'ABP_Base_GM_C::bFriendlyFire' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, FriendlyDmgMultiplier) == 0x00035C, "Member 'ABP_Base_GM_C::FriendlyDmgMultiplier' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TeamABots) == 0x000360, "Member 'ABP_Base_GM_C::TeamABots' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TeamBBots) == 0x000364, "Member 'ABP_Base_GM_C::TeamBBots' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, PlayerSpawnsA) == 0x000368, "Member 'ABP_Base_GM_C::PlayerSpawnsA' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, PlayerSpawnsB) == 0x000378, "Member 'ABP_Base_GM_C::PlayerSpawnsB' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, MinSpawnEnemyDistance) == 0x000388, "Member 'ABP_Base_GM_C::MinSpawnEnemyDistance' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TeamABotsControllers) == 0x000390, "Member 'ABP_Base_GM_C::TeamABotsControllers' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TeamBBotsControllers) == 0x0003A0, "Member 'ABP_Base_GM_C::TeamBBotsControllers' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TeamAScore) == 0x0003B0, "Member 'ABP_Base_GM_C::TeamAScore' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TeamBScore) == 0x0003B4, "Member 'ABP_Base_GM_C::TeamBScore' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, TimeToReset) == 0x0003B8, "Member 'ABP_Base_GM_C::TimeToReset' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, SelectedSpawn) == 0x0003C0, "Member 'ABP_Base_GM_C::SelectedSpawn' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, AI_BehaviorTree) == 0x0003C8, "Member 'ABP_Base_GM_C::AI_BehaviorTree' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, bUseAutoTeamBalance) == 0x0003D0, "Member 'ABP_Base_GM_C::bUseAutoTeamBalance' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, AI_Difficulty) == 0x0003D1, "Member 'ABP_Base_GM_C::AI_Difficulty' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, bPlayerCanChangeTeam) == 0x0003D2, "Member 'ABP_Base_GM_C::bPlayerCanChangeTeam' has a wrong offset!");
static_assert(offsetof(ABP_Base_GM_C, FFAMode) == 0x0003D3, "Member 'ABP_Base_GM_C::FFAMode' has a wrong offset!");

}

