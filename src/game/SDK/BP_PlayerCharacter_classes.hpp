#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_PlayerCharacter

#include "Basic.hpp"

#include "EEquipedWeapon_structs.hpp"
#include "EPlayerClass_structs.hpp"
#include "Engine_structs.hpp"
#include "ELethalEquipment_structs.hpp"
#include "AmmoMagazines_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "BP_BaseCharacter_classes.hpp"
#include "ECharacterMovementType_structs.hpp"
#include "EAmmoType_structs.hpp"
#include "EWeaponNames_structs.hpp"
#include "EFiringMode_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_PlayerCharacter.BP_PlayerCharacter_C
// 0x02A0 (0x07A0 - 0x0500)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_PlayerCharacter_C : public ABP_BaseCharacter_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_PlayerCharacter_C;               // 0x0500(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USkeletalMeshComponent*                 MeshFP;                                            // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       PlayerTagWidget;                                   // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera;                                            // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpringArmComponent*                    SpringArm;                                         // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_HealthComponent_C*                  HealthComponent;                                   // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Breathing_Timeline_f2_1A7FC93B4B1FAD736CE2C8A372DB7A13; // 0x0530(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Breathing_Timeline_f1_1A7FC93B4B1FAD736CE2C8A372DB7A13; // 0x0534(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Breathing_Timeline__Direction_1A7FC93B4B1FAD736CE2C8A372DB7A13; // 0x0538(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_539[0x7];                                      // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Breathing_Timeline;                                // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         FOV_Timeline_FOV_Curve_FD84FA384A273BDCFD2041B6D4052C86; // 0x0548(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            FOV_Timeline__Direction_FD84FA384A273BDCFD2041B6D4052C86; // 0x054C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54D[0x3];                                      // 0x054D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     FOV_Timeline;                                      // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BaseWeapon_C*                       PrimaryWeapon;                                     // 0x0558(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class ABP_BaseWeapon_C*                       SecondaryWeapon;                                   // 0x0560(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FTimerHandle                           AutoShootTimerHandle;                              // 0x0568(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         InteractRange;                                     // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_574[0x4];                                      // 0x0574(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CheckForInteractableTimerHandle;                   // 0x0578(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class AActor*                                 CurrentInteractable;                               // 0x0580(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class AActor*                                 Previous_Interactable;                             // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bInteracting;                                      // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           InteractingTimerHandle;                            // 0x0598(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bCanShoot;                                         // 0x05A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_5A1[0x3];                                      // 0x05A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultMovementSpeed;                              // 0x05A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         RunSpeedModifier;                                  // 0x05A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5AC[0x4];                                      // 0x05AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SecondaryWeaponToSpawn;                            // 0x05B0(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UClass*                                 PrimaryWeaponToSpawn;                              // 0x05B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bWantToJump;                                       // 0x05C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_5C1[0x3];                                      // 0x05C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PitchAcum;                                         // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         YawAcum;                                           // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Delta;                                             // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bCanRun;                                           // 0x05D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_5D1[0x3];                                      // 0x05D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultFOV;                                        // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CurrentFOV;                                        // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFirstShot;                                        // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_5DD[0x3];                                      // 0x05DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAmmoMagazines>                 Magazines;                                         // 0x05E0(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          bWantsToRun;                                       // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bWantsToAim;                                       // 0x05F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bRecentlyDamaged;                                  // 0x05F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bAimingAtAlly;                                     // 0x05F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bIsInSafeZone;                                     // 0x05F4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_5F5[0x3];                                      // 0x05F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           LeaveProtectedZoneHandle;                          // 0x05F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bWantToCrouch;                                     // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BasePlayerController_C*             ControllerRef;                                     // 0x0608(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         DefaultRunSpeedModdifier;                          // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ActualLeanAngle;                                   // 0x0614(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         MeleeAttackRange;                                  // 0x0618(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanUseMelee;                                      // 0x061C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_61D[0x3];                                      // 0x061D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetLean;                                        // 0x0620(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         DefaultCrouchSpeed;                                // 0x0624(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletsFired;                                      // 0x0628(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bFiringBurst;                                      // 0x062C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_62D[0x3];                                      // 0x062D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActualPitch;                                       // 0x0630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         ActualYaw;                                         // 0x0634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         InterpSpeed;                                       // 0x0638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         TargetFOV;                                         // 0x063C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         TargetSpread;                                      // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bAimingAtEnemy;                                    // 0x0644(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_645[0x3];                                      // 0x0645(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ActivateRegenTimerHandle;                          // 0x0648(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FTimerHandle                           RegenTimerHandle;                                  // 0x0650(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         Saturation;                                        // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         AbilityCoolDown;                                   // 0x065C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanUseSkill;                                      // 0x0660(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	uint8                                         Pad_661[0x3];                                      // 0x0661(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AimSensitivityMultiplier_;                         // 0x0664(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEquipedWeapon                                PreviousWeapon;                                    // 0x0668(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_669[0x3];                                      // 0x0669(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultCameraHeight;                               // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TPPSpringArmLength;                                // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                HitDirection;                                      // 0x0674(0x000C)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FVector                                SpringArmInitialLocation;                          // 0x0680(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         AimSpeedDivider;                                   // 0x068C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         LeanAngle;                                         // 0x0690(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_694[0x4];                                      // 0x0694(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWB_Dynamic_Crosshair_C*                DynamicCrosshairRef;                               // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bMovingForward;                                    // 0x06A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bWantsToUseExplosive;                              // 0x06A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bPerformingAction;                                 // 0x06A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bIsHeadshot;                                       // 0x06A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	class FName                                   HitBone;                                           // 0x06A4(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	bool                                          bWantsToInteract;                                  // 0x06AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay)
	bool                                          bEnableFallDamage;                                 // 0x06AD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6AE[0x2];                                      // 0x06AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             HitMarkerSound;                                    // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_WeaponKnife_C*                      MeleeWeapon;                                       // 0x06B8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAnimMontage*                           HitReactMontage;                                   // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BaseLethalEquipment_C*              LethalEquipment;                                   // 0x06C8(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	float                                         HoldBreathAlpha;                                   // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           HoldBreathTimer;                                   // 0x06D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           ResetBreathTimer;                                  // 0x06E0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         HoldBreathMaxTime;                                 // 0x06E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bCanHoldBreath;                                    // 0x06EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_6ED[0x3];                                      // 0x06ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoverBreathTime;                                 // 0x06F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6F4[0x4];                                      // 0x06F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TryToHoldBreathTimer;                              // 0x06F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bWantsToHoldBreath;                                // 0x0700(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bShooting;                                         // 0x0701(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor)
	uint8                                         Pad_702[0x2];                                      // 0x0702(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BreathingStrength;                                 // 0x0704(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bEnableBreathing;                                  // 0x0708(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_709[0x3];                                      // 0x0709(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Breathing_YawStrength;                             // 0x070C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Breathing_PitchStrength;                           // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bChangingWeapon;                                   // 0x0714(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_715[0x3];                                      // 0x0715(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SkillIcon;                                         // 0x0718(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TMap<class APlayerState*, float>              AssistList;                                        // 0x0720(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bEnableHealthRegeneration;                         // 0x0770(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_771[0x3];                                      // 0x0771(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealthRegenTick;                                   // 0x0774(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeToStartHealthRegeneration;                     // 0x0778(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bOnLadder;                                         // 0x077C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_77D[0x3];                                      // 0x077D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FPPBasePosition;                                   // 0x0780(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          At_Ladder_Top_;                                    // 0x078C(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          ToggleSprint;                                      // 0x078D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          ToggleCrouch;                                      // 0x078E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	bool                                          ToggleADS;                                         // 0x078F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)
	ECharacterMovementType                        MovementType;                                      // 0x0790(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          WasRunning;                                        // 0x0791(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void OnPlayerKill();
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void ReceivePossessed(class AController* NewController);
	void Update_Magazines(const TArray<struct FAmmoMagazines>& Magazines_0);
	void Server_EquipWeapons(class UClass* Primary_Weapon, class UClass* SecondaryWeapon_0);
	void SendInfoToKillFeed(const class AController* KillerPC, class ABP_PlayerCharacter_C* DeadActor, const class UDamageType* DamageType, class APlayerState* Assist, bool bHeadshot);
	void OnLanded(const struct FHitResult& Hit);
	void OnWalkingOffLedge(const struct FVector& PreviousFloorImpactNormal, const struct FVector& PreviousFloorContactNormal, const struct FVector& PreviousLocation, float TimeDelta);
	void OnJumped();
	void UpdateAll_tags();
	void Server_StartEnableDamageTimer();
	void UpdateWeaponFiringMode();
	void Client_PawnInit();
	void Client_OnEnterVehiclePassanger();
	void Client_ShowHitMarker(bool bIsVehicle);
	void OnMeleeCompleted();
	void Server_EquipLethal(class UClass* UtilityClass);
	void InitPlayerTag();
	void UpdateWeaponUI();
	void UpdateExplosives_UI();
	void StopPawn();
	void ShowHitMarker(bool bIsVehicle);
	void DropWeapon();
	void SetCurrentWeapon(class ABP_BaseWeapon_C* NewCurrentWeapon);
	void StartBreathing_();
	void StopBreathing();
	void ClientUpdateUI();
	void DropAmmo();
	void ClientChecklethal(ELethalEquipment A);
	void ExecuteUbergraph_BP_PlayerCharacter(int32 EntryPoint);
	void IsDead(bool* bIsDead);
	void GetCurrentWeapon(class ABP_BaseWeapon_C** CurrentWeapon_0);
	void IsAiming(bool* bAiming_0);
	void UsingTPP(bool* bUsingTPP_0);
	void CharacterNeedsExplosives(bool* bNeedsExplosives);
	void CharacterdNeedsAmmo(bool* bNeedsAmmo);
	void IsCharacterFullHP(bool* bIsFullHp);
	void CheckLethalEquipment(ELethalEquipment A);
	void OnMoveBackWard(float Input);
	void SetToggleSettings(bool ToggleSprinting, bool ToggleCrouching, bool ToggleADSing);
	void SetMotionBlur(float MotionBlur);
	void SetCameraFOV(float DefaultFOV_0);
	void TopOfLadder(bool AtLadderTop_);
	void MoveFPPWhenCrouching(bool bPickA);
	void ToggleOnLadder(bool OnLadder_);
	void OnMoveUpLadder(float Input);
	void OnRep_LethalEquipment();
	void UpdateKillFeed(class AController* Instigator_0, const class UDamageType* DmgType);
	void GetPlayerWithMostDamageDone(class APlayerState** PS, float* DamageDone);
	void AddToAssistList(class AController* Instigator_0, float DamageDone, float DamageThreshold);
	void SetShooting(bool Shooting);
	void OnRep_bShooting();
	void IsUsingPrimary(bool* bUsingPrimary);
	void EquipMeleeWeapon();
	void StopCurrentWeaponReload();
	void GivePointsTo_Instigator(class AController* Instigator_0, float Points);
	void UpdateHUDTeamIcon();
	void OnRep_PrimaryWeapon();
	void ReduceExplosiveAmmo();
	void GetPlayerHP(class ABP_BaseCharacter_C* Character, float* HP);
	void SimulatePhysicsOnWeapon(class ABP_BaseWeapon_C* Weapon, bool bSimulate);
	void AttachWeapon(class ABP_BaseWeapon_C* WeaponCreated);
	void ShowWeapon();
	void Interact();
	void EndInteract();
	void BeginInteract();
	void AddAmmoType(EAmmoType AmmoType);
	void PawnUnpossess();
	void SetMovementSpeedOnAiming(bool bAiming_0);
	void Damage_Player(float Damage, const class UDamageType* DmgType, class AController* Instigator_0, class AActor* DmgCauser);
	void HealPlayer(float HealAmount, class AController* Instigator_0);
	void ResetOrientationAndMovementMode();
	void ResetCollision();
	void DestroyPrimaryWeapon(class ABP_PlayerCharacter_C* Pawn);
	class FText GetName(class ABP_PlayerState_C* PlayerState_0);
	void UpdateSpringArmPosition();
	void UpdateArmsVisibility();
	void DestroyWeapons_AttachedActors();
	void PawnDeath(const class FText& KillerName, float KillerHealth, EPlayerClass KillerClass, const class UDamageType* DamageType);
	void ChangeFiringMode();
	void OnAiming(bool bAiming_0);
	void TogglePerspective();
	void OnMoveRight(float Input);
	void OnMoveForward(float Input);
	void OnLookUp(float Input);
	void OnTurn(float Input);
	void Spectate(class APawn* Pawn, class AController* Controller_0);
	void PawnInit();
	void OnDead(class ABP_PlayerCharacter_C* DeadActor, class AController* InstigatorControler, const class UDamageType* DmgType, class AActor* DamageCauser);
	void OnPossesedPawn(class AController* Controller_0);
	void EnableDamage();
	void Show_MeleeWeapon();
	void GetKillerInfo(class AController* Instigator_0, class FText* Name_0, EPlayerClass* Class_0, float* HP);
	void Crouching();
	void RefillAmmo();
	void On_DamageTaken(float Damage, const class UDamageType* DamageType, class AController* InstigatorController, class AActor* DamageCauser);
	void ApplySelectedPerk();
	void CheckForInteractable();
	void CheckTarget();
	void SetLeanRotation();
	void AdjustCamera(float Input);
	void RegenHealth();
	void ActivateRegenHealth();
	void StartRegenTimer();
	void SetSpreadTarget();
	void SetMagazines(int32 Index_0, int32 NewAmmoQuantity);
	void AddRecoilYaw();
	void AddRecoilPitch();
	void NoAmmo();
	void StopShoting_();
	void DirectionalDamageIndicator(const struct FVector& DmgCauserLocation);
	void MeleeAttack();
	void TakeDamage(float Damage, class AController* ControllerInstigator, bool* bDead_0, float* DamageToDo);
	void ResetRecoil();
	void SetWeaponVisibility(class ABP_BaseWeapon_C* Weapon, bool bVisible);
	void EquipWeapon(class UClass* WeaponToSpawn, int32 ActualAmmo, bool bInitialValues, bool bPrimary);
	void HasAmmo(class ABP_BaseWeapon_C* Weapon, bool* Success, int32* Ammo, int32* MagazinesIndex, int32* NewQuantity);
	void MovementRecoil(class ABP_BaseWeapon_C* Weapon, float* Spread);
	void SetPOV();
	void AddRecoil();
	void TryToShoot(bool* CanShoot);
	void UserConstructionScript();
	void FOV_Timeline__FinishedFunc();
	void FOV_Timeline__UpdateFunc();
	void Breathing_Timeline__FinishedFunc();
	void Breathing_Timeline__UpdateFunc();
	void OnNotifyEnd_9752C47D4AD85EE376746DA75A9FBB0E(class FName NotifyName);
	void OnNotifyBegin_9752C47D4AD85EE376746DA75A9FBB0E(class FName NotifyName);
	void OnInterrupted_9752C47D4AD85EE376746DA75A9FBB0E(class FName NotifyName);
	void OnBlendOut_9752C47D4AD85EE376746DA75A9FBB0E(class FName NotifyName);
	void OnCompleted_9752C47D4AD85EE376746DA75A9FBB0E(class FName NotifyName);
	void OnNotifyEnd_886F889E4A58FB2FF43759BF3C63C7C4(class FName NotifyName);
	void OnNotifyBegin_886F889E4A58FB2FF43759BF3C63C7C4(class FName NotifyName);
	void OnInterrupted_886F889E4A58FB2FF43759BF3C63C7C4(class FName NotifyName);
	void OnBlendOut_886F889E4A58FB2FF43759BF3C63C7C4(class FName NotifyName);
	void OnCompleted_886F889E4A58FB2FF43759BF3C63C7C4(class FName NotifyName);
	void OnNotifyEnd_A01E8A264229EF2A821AFFA1465F3DD1(class FName NotifyName);
	void OnNotifyBegin_A01E8A264229EF2A821AFFA1465F3DD1(class FName NotifyName);
	void OnInterrupted_A01E8A264229EF2A821AFFA1465F3DD1(class FName NotifyName);
	void OnBlendOut_A01E8A264229EF2A821AFFA1465F3DD1(class FName NotifyName);
	void OnCompleted_A01E8A264229EF2A821AFFA1465F3DD1(class FName NotifyName);
	void OnNotifyEnd_A01E8A264229EF2A821AFFA15D430122(class FName NotifyName);
	void OnNotifyBegin_A01E8A264229EF2A821AFFA15D430122(class FName NotifyName);
	void OnInterrupted_A01E8A264229EF2A821AFFA15D430122(class FName NotifyName);
	void OnBlendOut_A01E8A264229EF2A821AFFA15D430122(class FName NotifyName);
	void OnCompleted_A01E8A264229EF2A821AFFA15D430122(class FName NotifyName);
	void OnNotifyEnd_A01E8A264229EF2A821AFFA1891936D2(class FName NotifyName);
	void OnNotifyBegin_A01E8A264229EF2A821AFFA1891936D2(class FName NotifyName);
	void OnInterrupted_A01E8A264229EF2A821AFFA1891936D2(class FName NotifyName);
	void OnBlendOut_A01E8A264229EF2A821AFFA1891936D2(class FName NotifyName);
	void OnCompleted_A01E8A264229EF2A821AFFA1891936D2(class FName NotifyName);
	void OnNotifyEnd_25E6DEF74F7276004536CD87BC214DFF(class FName NotifyName);
	void OnNotifyBegin_25E6DEF74F7276004536CD87BC214DFF(class FName NotifyName);
	void OnInterrupted_25E6DEF74F7276004536CD87BC214DFF(class FName NotifyName);
	void OnBlendOut_25E6DEF74F7276004536CD87BC214DFF(class FName NotifyName);
	void OnCompleted_25E6DEF74F7276004536CD87BC214DFF(class FName NotifyName);
	void OnNotifyEnd_516817DE469539D911F4BB8B5B50E9BD(class FName NotifyName);
	void OnNotifyBegin_516817DE469539D911F4BB8B5B50E9BD(class FName NotifyName);
	void OnInterrupted_516817DE469539D911F4BB8B5B50E9BD(class FName NotifyName);
	void OnBlendOut_516817DE469539D911F4BB8B5B50E9BD(class FName NotifyName);
	void OnCompleted_516817DE469539D911F4BB8B5B50E9BD(class FName NotifyName);
	void OnNotifyEnd_A3FFF40A4AA3BA1A4B17F086EF25BA17(class FName NotifyName);
	void OnNotifyBegin_A3FFF40A4AA3BA1A4B17F086EF25BA17(class FName NotifyName);
	void OnInterrupted_A3FFF40A4AA3BA1A4B17F086EF25BA17(class FName NotifyName);
	void OnBlendOut_A3FFF40A4AA3BA1A4B17F086EF25BA17(class FName NotifyName);
	void OnCompleted_A3FFF40A4AA3BA1A4B17F086EF25BA17(class FName NotifyName);
	void InpActEvt_Skill_K2Node_InputActionEvent_24(const struct FKey& Key);
	void OnNotifyEnd_EED188944CC8D724E5A589AB172C1760(class FName NotifyName);
	void OnNotifyBegin_EED188944CC8D724E5A589AB172C1760(class FName NotifyName);
	void OnInterrupted_EED188944CC8D724E5A589AB172C1760(class FName NotifyName);
	void OnBlendOut_EED188944CC8D724E5A589AB172C1760(class FName NotifyName);
	void OnCompleted_EED188944CC8D724E5A589AB172C1760(class FName NotifyName);
	void InpActEvt_Interact_K2Node_InputActionEvent_23(const struct FKey& Key);
	void InpActEvt_Interact_K2Node_InputActionEvent_22(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_21(const struct FKey& Key);
	void InpActEvt_Fire_K2Node_InputActionEvent_20(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_19(const struct FKey& Key);
	void InpActEvt_Jump_K2Node_InputActionEvent_18(const struct FKey& Key);
	void InpActEvt_Reload_K2Node_InputActionEvent_17(const struct FKey& Key);
	void InpActEvt_Run_K2Node_InputActionEvent_16(const struct FKey& Key);
	void InpActEvt_Run_K2Node_InputActionEvent_15(const struct FKey& Key);
	void OnNotifyEnd_472935974CD0378368D6318D7D0264C6(class FName NotifyName);
	void OnNotifyBegin_472935974CD0378368D6318D7D0264C6(class FName NotifyName);
	void OnInterrupted_472935974CD0378368D6318D7D0264C6(class FName NotifyName);
	void OnBlendOut_472935974CD0378368D6318D7D0264C6(class FName NotifyName);
	void OnCompleted_472935974CD0378368D6318D7D0264C6(class FName NotifyName);
	void InpActEvt_Aim_K2Node_InputActionEvent_14(const struct FKey& Key);
	void InpActEvt_Aim_K2Node_InputActionEvent_13(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_12(const struct FKey& Key);
	void InpActEvt_Crouch_K2Node_InputActionEvent_11(const struct FKey& Key);
	void InpActEvt_ToggleWeapon_K2Node_InputActionEvent_10(const struct FKey& Key);
	void InpActEvt_MeleeAttack_K2Node_InputActionEvent_9(const struct FKey& Key);
	void InpActEvt_ChangeFiringMode_K2Node_InputActionEvent_8(const struct FKey& Key);
	void InpActEvt_LeanRight_K2Node_InputActionEvent_7(const struct FKey& Key);
	void InpActEvt_LeanLeft_K2Node_InputActionEvent_6(const struct FKey& Key);
	void OnNotifyEnd_F716DF2F494792662716AB9E69095EBF(class FName NotifyName);
	void OnNotifyBegin_F716DF2F494792662716AB9E69095EBF(class FName NotifyName);
	void OnInterrupted_F716DF2F494792662716AB9E69095EBF(class FName NotifyName);
	void OnBlendOut_F716DF2F494792662716AB9E69095EBF(class FName NotifyName);
	void OnCompleted_F716DF2F494792662716AB9E69095EBF(class FName NotifyName);
	void OnNotifyEnd_F25EE13D4EB43E8DD1A4B5B9FF3A555B(class FName NotifyName);
	void OnNotifyBegin_F25EE13D4EB43E8DD1A4B5B9FF3A555B(class FName NotifyName);
	void OnInterrupted_F25EE13D4EB43E8DD1A4B5B9FF3A555B(class FName NotifyName);
	void OnBlendOut_F25EE13D4EB43E8DD1A4B5B9FF3A555B(class FName NotifyName);
	void OnCompleted_F25EE13D4EB43E8DD1A4B5B9FF3A555B(class FName NotifyName);
	void OnNotifyEnd_A01E8A264229EF2A821AFFA152FA38E4(class FName NotifyName);
	void OnNotifyBegin_A01E8A264229EF2A821AFFA152FA38E4(class FName NotifyName);
	void OnInterrupted_A01E8A264229EF2A821AFFA152FA38E4(class FName NotifyName);
	void OnBlendOut_A01E8A264229EF2A821AFFA152FA38E4(class FName NotifyName);
	void OnCompleted_A01E8A264229EF2A821AFFA152FA38E4(class FName NotifyName);
	void OnNotifyEnd_472935974CD0378368D6318DFECEF393(class FName NotifyName);
	void OnNotifyBegin_472935974CD0378368D6318DFECEF393(class FName NotifyName);
	void OnInterrupted_472935974CD0378368D6318DFECEF393(class FName NotifyName);
	void OnBlendOut_472935974CD0378368D6318DFECEF393(class FName NotifyName);
	void OnCompleted_472935974CD0378368D6318DFECEF393(class FName NotifyName);
	void OnNotifyEnd_22E17CC54118F3390990988E53AD25D3(class FName NotifyName);
	void OnNotifyBegin_22E17CC54118F3390990988E53AD25D3(class FName NotifyName);
	void OnInterrupted_22E17CC54118F3390990988E53AD25D3(class FName NotifyName);
	void OnBlendOut_22E17CC54118F3390990988E53AD25D3(class FName NotifyName);
	void OnCompleted_22E17CC54118F3390990988E53AD25D3(class FName NotifyName);
	void InpActEvt_MouseScrollUp_K2Node_InputKeyEvent_1(const struct FKey& Key);
	void InpActEvt_MouseScrollDown_K2Node_InputKeyEvent_0(const struct FKey& Key);
	void OnNotifyEnd_472935974CD0378368D6318D1873FA0F(class FName NotifyName);
	void OnNotifyBegin_472935974CD0378368D6318D1873FA0F(class FName NotifyName);
	void OnInterrupted_472935974CD0378368D6318D1873FA0F(class FName NotifyName);
	void OnBlendOut_472935974CD0378368D6318D1873FA0F(class FName NotifyName);
	void OnCompleted_472935974CD0378368D6318D1873FA0F(class FName NotifyName);
	void OnNotifyEnd_D14D6E6D4983E19A47768DBD0387B163(class FName NotifyName);
	void OnNotifyBegin_D14D6E6D4983E19A47768DBD0387B163(class FName NotifyName);
	void OnInterrupted_D14D6E6D4983E19A47768DBD0387B163(class FName NotifyName);
	void OnBlendOut_D14D6E6D4983E19A47768DBD0387B163(class FName NotifyName);
	void OnCompleted_D14D6E6D4983E19A47768DBD0387B163(class FName NotifyName);
	void InpActEvt_PrimaryWeapon_K2Node_InputActionEvent_5(const struct FKey& Key);
	void InpActEvt_SecondaryWeapon_K2Node_InputActionEvent_4(const struct FKey& Key);
	void InpActEvt_HoldBreath_K2Node_InputActionEvent_3(const struct FKey& Key);
	void InpActEvt_HoldBreath_K2Node_InputActionEvent_2(const struct FKey& Key);
	void OnNotifyEnd_472935974CD0378368D6318D0CD6FF3A(class FName NotifyName);
	void OnNotifyBegin_472935974CD0378368D6318D0CD6FF3A(class FName NotifyName);
	void OnInterrupted_472935974CD0378368D6318D0CD6FF3A(class FName NotifyName);
	void OnBlendOut_472935974CD0378368D6318D0CD6FF3A(class FName NotifyName);
	void OnCompleted_472935974CD0378368D6318D0CD6FF3A(class FName NotifyName);
	void OnNotifyEnd_21B8E5A941E7B31374776E9D1B84D16E(class FName NotifyName);
	void OnNotifyBegin_21B8E5A941E7B31374776E9D1B84D16E(class FName NotifyName);
	void OnInterrupted_21B8E5A941E7B31374776E9D1B84D16E(class FName NotifyName);
	void OnBlendOut_21B8E5A941E7B31374776E9D1B84D16E(class FName NotifyName);
	void OnCompleted_21B8E5A941E7B31374776E9D1B84D16E(class FName NotifyName);
	void InpActEvt_Lethal_Equipment_K2Node_InputActionEvent_1(const struct FKey& Key);
	void InpActEvt_Lethal_Equipment_K2Node_InputActionEvent_0(const struct FKey& Key);
	void OnNotifyEnd_3E6ACAB8442176E02B0A7499F031F617(class FName NotifyName);
	void OnNotifyBegin_3E6ACAB8442176E02B0A7499F031F617(class FName NotifyName);
	void OnInterrupted_3E6ACAB8442176E02B0A7499F031F617(class FName NotifyName);
	void OnBlendOut_3E6ACAB8442176E02B0A7499F031F617(class FName NotifyName);
	void OnCompleted_3E6ACAB8442176E02B0A7499F031F617(class FName NotifyName);
	void OnNotifyEnd_772EF67045F82873BA41DC8A43414685(class FName NotifyName);
	void OnNotifyBegin_772EF67045F82873BA41DC8A43414685(class FName NotifyName);
	void OnInterrupted_772EF67045F82873BA41DC8A43414685(class FName NotifyName);
	void OnBlendOut_772EF67045F82873BA41DC8A43414685(class FName NotifyName);
	void OnCompleted_772EF67045F82873BA41DC8A43414685(class FName NotifyName);
	void OnNotifyEnd_A59671AB46B259F55C5258B0706FF1E0(class FName NotifyName);
	void OnNotifyBegin_A59671AB46B259F55C5258B0706FF1E0(class FName NotifyName);
	void OnInterrupted_A59671AB46B259F55C5258B0706FF1E0(class FName NotifyName);
	void OnBlendOut_A59671AB46B259F55C5258B0706FF1E0(class FName NotifyName);
	void OnCompleted_A59671AB46B259F55C5258B0706FF1E0(class FName NotifyName);
	void OnNotifyEnd_472935974CD0378368D6318D17CAC3C9(class FName NotifyName);
	void OnNotifyBegin_472935974CD0378368D6318D17CAC3C9(class FName NotifyName);
	void OnInterrupted_472935974CD0378368D6318D17CAC3C9(class FName NotifyName);
	void OnBlendOut_472935974CD0378368D6318D17CAC3C9(class FName NotifyName);
	void OnCompleted_472935974CD0378368D6318D17CAC3C9(class FName NotifyName);
	void OnNotifyEnd_A01E8A264229EF2A821AFFA1BABE8BB4(class FName NotifyName);
	void OnNotifyBegin_A01E8A264229EF2A821AFFA1BABE8BB4(class FName NotifyName);
	void OnInterrupted_A01E8A264229EF2A821AFFA1BABE8BB4(class FName NotifyName);
	void OnBlendOut_A01E8A264229EF2A821AFFA1BABE8BB4(class FName NotifyName);
	void OnCompleted_A01E8A264229EF2A821AFFA1BABE8BB4(class FName NotifyName);
	void OnNotifyEnd_A01E8A264229EF2A821AFFA1B4473178(class FName NotifyName);
	void OnNotifyBegin_A01E8A264229EF2A821AFFA1B4473178(class FName NotifyName);
	void OnInterrupted_A01E8A264229EF2A821AFFA1B4473178(class FName NotifyName);
	void OnBlendOut_A01E8A264229EF2A821AFFA1B4473178(class FName NotifyName);
	void OnCompleted_A01E8A264229EF2A821AFFA1B4473178(class FName NotifyName);
	void OnWeaponInteract(class ABP_BaseWeapon_C* NewWeapon);
	void StopFiringWeapon();
	void ThrowItem();
	void DestroyPawnWeapon();
	void ShowVehicleHitMarker();
	void AIUseMelee();
	void ResetSkill();
	void PlayThrowAnimation();
	void Server_PlayThrowAnimation();
	void Multicast_PlayThrowAnimation();
	void UseClassSkill();
	void Server_SpawnMedKit(class UClass* ItemToSpawn);
	void Server_Interact(class AActor* Interactable, class ACharacter* Character);
	void Client_Cancel_Interact();
	void Server_BeginInteract(class AActor* Interactable, class ACharacter* Character);
	void PawnInteract();
	void AutoShoot();
	void ResetCanShoot();
	void Client_PlayHitMarkerSound();
	void FireWeapon();
	void AutoReloadSystem();
	void Server_SetShooting(bool bShooting_0);
	void InpAxisEvt_Turn_K2Node_InputAxisEvent_157(float AxisValue);
	void InpAxisEvt_LookUp_K2Node_InputAxisEvent_172(float AxisValue);
	void InpAxisEvt_MoveForward_K2Node_InputAxisEvent_181(float AxisValue);
	void InpAxisEvt_MoveRight_K2Node_InputAxisEvent_192(float AxisValue);
	void Server_Running(bool bRunning_0);
	void Server_Walk();
	void Server_SetAim(bool bAim);
	void CheckRun();
	void CheckAim();
	void UpdateWeaponVisibility(bool ShowPrimary);
	void Server_ApplyMeleeDamage(class AActor* DamagedActor, class ABP_PlayerCharacter_C* Intigator);
	void ReloadWeapon();
	void Server_PlayReloadAnimation();
	void ResetLeaning();
	void Server_SetLeaning(bool bRight, bool bIsLeaning);
	void Server_ResetLeaning();
	void RefreshAim();
	void UpdateRun();
	void StopAiming();
	void ForceUncrouch();
	void Multicast_PlayMeleeMontage();
	void Multicast_PlayReloadMontage();
	void UseMelee();
	void Server_SetWeaponEquiped(EEquipedWeapon NewWeapon);
	void Multicast_PlayEquipWeaponMontage();
	void TryReload();
	void ForcedWeaponChange(bool Primary, bool QuickChange);
	void Server_UpdateRunMultiplier(float NewMultiplier);
	void Client_RefillMagazines();
	void Client_ForceChangeWeapon(bool Primary, bool QuickChange);
	void Server_OnPickupWeapon(class UClass* WeaponClass, int32 Ammo);
	void OnBeginAiming();
	void OnEndAiming();
	void OnRefillAmmo();
	void OnReloadCompleted();
	void AddAmmo(EAmmoType AmmoType);
	void OnPickupWeapon(class UClass* WeaponClass, int32 CurrentAmmo);
	void HideFPPMesh();
	void ShowFPPMesh();
	void PlayUseExplosiveAnimation();
	void Multicast_PlayUseExplosiveAnimation();
	void SpawnExplosive();
	void AddAmmoToCurrentWeapon();
	void Client_AddAmmoType();
	void AddLethalAmmo();
	void OnCurrentWeaponChanged();
	void StopHoldingBreath();
	void ResetBreathTime();
	void TryToHoldBreath();
	void PlayFiringWeaponAnim();
	void StopFiringWeaponAnim();
	void Server_PlayTPPMeleeAnimation();
	void ShowTPPMesh();
	void HideTPPMesh();
	void Server_SetUsingLethal(bool bUsingLethal_0);
	void ShowLethalEquipment();
	void HideLethalEquipment();
	void PlayFPPEquipWeapon();
	void PlayTPPEquipWeapon();
	void HideWeapon();
	void ReduceLethalAmmo();
	void Client_AddLethalAmmo();
	void ForceStopRunning();
	void InpAxisEvt_MoveBackward_K2Node_InputAxisEvent_0(float AxisValue);
	void InpAxisEvt_MoveLeft_K2Node_InputAxisEvent_1(float AxisValue);
	void ReceiveAnyDamage(float Damage, const class UDamageType* DamageType, class AController* InstigatedBy, class AActor* DamageCauser);
	void HandleDeath(class ABP_PlayerCharacter_C* Dead_Actor, class AController* Instigator_Controller, const class UDamageType* DmgType, class AActor* DamageCauser);
	void Activate_Ragdoll();
	void Client_OnPawnDeath(const class FText& KillerName, float KillerHP, EPlayerClass KillerClass, const class UDamageType* DmgType);
	void Client_OnTakeDamage(float NewHP);
	void Client_PlayImpactShake(class AActor* Instigator_0);
	void Client_DeadCam();
	void Client_DamageDirection(class AActor* DamageCauser);
	void Multicast_PlayHitMontage();
	void Server_SpectateKiller(class APawn* KillerPawn, class AController* Controller_0);
	void ReceivePointDamage(float Damage, const class UDamageType* DamageType, const struct FVector& HitLocation, const struct FVector& HitNormal, class UPrimitiveComponent* HitComponent, class FName BoneName, const struct FVector& ShotFromDirection, class AController* InstigatedBy, class AActor* DamageCauser, const struct FHitResult& HitInfo);
	void ReceiveRadialDamage(float DamageReceived, const class UDamageType* DamageType, const struct FVector& Origin, const struct FHitResult& HitInfo, class AController* InstigatedBy, class AActor* DamageCauser);
	void Server_UpdateMaxHP(float NewHP);
	void Client_PlayHealSound();
	void OnPlayerHit();
	void OnSuicide();
	void Suicide();
	void Client_OnHeal(float NewHP, float HPHealed);
	void PlayHealCosmeticEffects();
	void UpdateUI_Health(float NewHP);
	void OnPlayerKilled();
	void ClearHudOnDead();
	void OnDeadRep();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_PlayerCharacter_C">();
	}
	static class ABP_PlayerCharacter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_PlayerCharacter_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_PlayerCharacter_C) == 0x000010, "Wrong alignment on ABP_PlayerCharacter_C");
static_assert(sizeof(ABP_PlayerCharacter_C) == 0x0007A0, "Wrong size on ABP_PlayerCharacter_C");
static_assert(offsetof(ABP_PlayerCharacter_C, UberGraphFrame_BP_PlayerCharacter_C) == 0x000500, "Member 'ABP_PlayerCharacter_C::UberGraphFrame_BP_PlayerCharacter_C' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MeshFP) == 0x000508, "Member 'ABP_PlayerCharacter_C::MeshFP' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PlayerTagWidget) == 0x000510, "Member 'ABP_PlayerCharacter_C::PlayerTagWidget' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Camera) == 0x000518, "Member 'ABP_PlayerCharacter_C::Camera' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SpringArm) == 0x000520, "Member 'ABP_PlayerCharacter_C::SpringArm' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HealthComponent) == 0x000528, "Member 'ABP_PlayerCharacter_C::HealthComponent' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Breathing_Timeline_f2_1A7FC93B4B1FAD736CE2C8A372DB7A13) == 0x000530, "Member 'ABP_PlayerCharacter_C::Breathing_Timeline_f2_1A7FC93B4B1FAD736CE2C8A372DB7A13' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Breathing_Timeline_f1_1A7FC93B4B1FAD736CE2C8A372DB7A13) == 0x000534, "Member 'ABP_PlayerCharacter_C::Breathing_Timeline_f1_1A7FC93B4B1FAD736CE2C8A372DB7A13' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Breathing_Timeline__Direction_1A7FC93B4B1FAD736CE2C8A372DB7A13) == 0x000538, "Member 'ABP_PlayerCharacter_C::Breathing_Timeline__Direction_1A7FC93B4B1FAD736CE2C8A372DB7A13' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Breathing_Timeline) == 0x000540, "Member 'ABP_PlayerCharacter_C::Breathing_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FOV_Timeline_FOV_Curve_FD84FA384A273BDCFD2041B6D4052C86) == 0x000548, "Member 'ABP_PlayerCharacter_C::FOV_Timeline_FOV_Curve_FD84FA384A273BDCFD2041B6D4052C86' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FOV_Timeline__Direction_FD84FA384A273BDCFD2041B6D4052C86) == 0x00054C, "Member 'ABP_PlayerCharacter_C::FOV_Timeline__Direction_FD84FA384A273BDCFD2041B6D4052C86' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FOV_Timeline) == 0x000550, "Member 'ABP_PlayerCharacter_C::FOV_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PrimaryWeapon) == 0x000558, "Member 'ABP_PlayerCharacter_C::PrimaryWeapon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SecondaryWeapon) == 0x000560, "Member 'ABP_PlayerCharacter_C::SecondaryWeapon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, AutoShootTimerHandle) == 0x000568, "Member 'ABP_PlayerCharacter_C::AutoShootTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, InteractRange) == 0x000570, "Member 'ABP_PlayerCharacter_C::InteractRange' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CheckForInteractableTimerHandle) == 0x000578, "Member 'ABP_PlayerCharacter_C::CheckForInteractableTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CurrentInteractable) == 0x000580, "Member 'ABP_PlayerCharacter_C::CurrentInteractable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Previous_Interactable) == 0x000588, "Member 'ABP_PlayerCharacter_C::Previous_Interactable' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bInteracting) == 0x000590, "Member 'ABP_PlayerCharacter_C::bInteracting' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, InteractingTimerHandle) == 0x000598, "Member 'ABP_PlayerCharacter_C::InteractingTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bCanShoot) == 0x0005A0, "Member 'ABP_PlayerCharacter_C::bCanShoot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DefaultMovementSpeed) == 0x0005A4, "Member 'ABP_PlayerCharacter_C::DefaultMovementSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, RunSpeedModifier) == 0x0005A8, "Member 'ABP_PlayerCharacter_C::RunSpeedModifier' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SecondaryWeaponToSpawn) == 0x0005B0, "Member 'ABP_PlayerCharacter_C::SecondaryWeaponToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PrimaryWeaponToSpawn) == 0x0005B8, "Member 'ABP_PlayerCharacter_C::PrimaryWeaponToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bWantToJump) == 0x0005C0, "Member 'ABP_PlayerCharacter_C::bWantToJump' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PitchAcum) == 0x0005C4, "Member 'ABP_PlayerCharacter_C::PitchAcum' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, YawAcum) == 0x0005C8, "Member 'ABP_PlayerCharacter_C::YawAcum' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Delta) == 0x0005CC, "Member 'ABP_PlayerCharacter_C::Delta' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bCanRun) == 0x0005D0, "Member 'ABP_PlayerCharacter_C::bCanRun' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DefaultFOV) == 0x0005D4, "Member 'ABP_PlayerCharacter_C::DefaultFOV' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, CurrentFOV) == 0x0005D8, "Member 'ABP_PlayerCharacter_C::CurrentFOV' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bFirstShot) == 0x0005DC, "Member 'ABP_PlayerCharacter_C::bFirstShot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Magazines) == 0x0005E0, "Member 'ABP_PlayerCharacter_C::Magazines' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bWantsToRun) == 0x0005F0, "Member 'ABP_PlayerCharacter_C::bWantsToRun' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bWantsToAim) == 0x0005F1, "Member 'ABP_PlayerCharacter_C::bWantsToAim' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bRecentlyDamaged) == 0x0005F2, "Member 'ABP_PlayerCharacter_C::bRecentlyDamaged' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bAimingAtAlly) == 0x0005F3, "Member 'ABP_PlayerCharacter_C::bAimingAtAlly' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bIsInSafeZone) == 0x0005F4, "Member 'ABP_PlayerCharacter_C::bIsInSafeZone' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, LeaveProtectedZoneHandle) == 0x0005F8, "Member 'ABP_PlayerCharacter_C::LeaveProtectedZoneHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bWantToCrouch) == 0x000600, "Member 'ABP_PlayerCharacter_C::bWantToCrouch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ControllerRef) == 0x000608, "Member 'ABP_PlayerCharacter_C::ControllerRef' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DefaultRunSpeedModdifier) == 0x000610, "Member 'ABP_PlayerCharacter_C::DefaultRunSpeedModdifier' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ActualLeanAngle) == 0x000614, "Member 'ABP_PlayerCharacter_C::ActualLeanAngle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MeleeAttackRange) == 0x000618, "Member 'ABP_PlayerCharacter_C::MeleeAttackRange' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bCanUseMelee) == 0x00061C, "Member 'ABP_PlayerCharacter_C::bCanUseMelee' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TargetLean) == 0x000620, "Member 'ABP_PlayerCharacter_C::TargetLean' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DefaultCrouchSpeed) == 0x000624, "Member 'ABP_PlayerCharacter_C::DefaultCrouchSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BulletsFired) == 0x000628, "Member 'ABP_PlayerCharacter_C::BulletsFired' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bFiringBurst) == 0x00062C, "Member 'ABP_PlayerCharacter_C::bFiringBurst' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ActualPitch) == 0x000630, "Member 'ABP_PlayerCharacter_C::ActualPitch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ActualYaw) == 0x000634, "Member 'ABP_PlayerCharacter_C::ActualYaw' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, InterpSpeed) == 0x000638, "Member 'ABP_PlayerCharacter_C::InterpSpeed' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TargetFOV) == 0x00063C, "Member 'ABP_PlayerCharacter_C::TargetFOV' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TargetSpread) == 0x000640, "Member 'ABP_PlayerCharacter_C::TargetSpread' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bAimingAtEnemy) == 0x000644, "Member 'ABP_PlayerCharacter_C::bAimingAtEnemy' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ActivateRegenTimerHandle) == 0x000648, "Member 'ABP_PlayerCharacter_C::ActivateRegenTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, RegenTimerHandle) == 0x000650, "Member 'ABP_PlayerCharacter_C::RegenTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Saturation) == 0x000658, "Member 'ABP_PlayerCharacter_C::Saturation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, AbilityCoolDown) == 0x00065C, "Member 'ABP_PlayerCharacter_C::AbilityCoolDown' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bCanUseSkill) == 0x000660, "Member 'ABP_PlayerCharacter_C::bCanUseSkill' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, AimSensitivityMultiplier_) == 0x000664, "Member 'ABP_PlayerCharacter_C::AimSensitivityMultiplier_' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, PreviousWeapon) == 0x000668, "Member 'ABP_PlayerCharacter_C::PreviousWeapon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DefaultCameraHeight) == 0x00066C, "Member 'ABP_PlayerCharacter_C::DefaultCameraHeight' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TPPSpringArmLength) == 0x000670, "Member 'ABP_PlayerCharacter_C::TPPSpringArmLength' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HitDirection) == 0x000674, "Member 'ABP_PlayerCharacter_C::HitDirection' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SpringArmInitialLocation) == 0x000680, "Member 'ABP_PlayerCharacter_C::SpringArmInitialLocation' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, AimSpeedDivider) == 0x00068C, "Member 'ABP_PlayerCharacter_C::AimSpeedDivider' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, LeanAngle) == 0x000690, "Member 'ABP_PlayerCharacter_C::LeanAngle' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, DynamicCrosshairRef) == 0x000698, "Member 'ABP_PlayerCharacter_C::DynamicCrosshairRef' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bMovingForward) == 0x0006A0, "Member 'ABP_PlayerCharacter_C::bMovingForward' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bWantsToUseExplosive) == 0x0006A1, "Member 'ABP_PlayerCharacter_C::bWantsToUseExplosive' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bPerformingAction) == 0x0006A2, "Member 'ABP_PlayerCharacter_C::bPerformingAction' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bIsHeadshot) == 0x0006A3, "Member 'ABP_PlayerCharacter_C::bIsHeadshot' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HitBone) == 0x0006A4, "Member 'ABP_PlayerCharacter_C::HitBone' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bWantsToInteract) == 0x0006AC, "Member 'ABP_PlayerCharacter_C::bWantsToInteract' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bEnableFallDamage) == 0x0006AD, "Member 'ABP_PlayerCharacter_C::bEnableFallDamage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HitMarkerSound) == 0x0006B0, "Member 'ABP_PlayerCharacter_C::HitMarkerSound' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MeleeWeapon) == 0x0006B8, "Member 'ABP_PlayerCharacter_C::MeleeWeapon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HitReactMontage) == 0x0006C0, "Member 'ABP_PlayerCharacter_C::HitReactMontage' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, LethalEquipment) == 0x0006C8, "Member 'ABP_PlayerCharacter_C::LethalEquipment' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HoldBreathAlpha) == 0x0006D0, "Member 'ABP_PlayerCharacter_C::HoldBreathAlpha' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HoldBreathTimer) == 0x0006D8, "Member 'ABP_PlayerCharacter_C::HoldBreathTimer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ResetBreathTimer) == 0x0006E0, "Member 'ABP_PlayerCharacter_C::ResetBreathTimer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HoldBreathMaxTime) == 0x0006E8, "Member 'ABP_PlayerCharacter_C::HoldBreathMaxTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bCanHoldBreath) == 0x0006EC, "Member 'ABP_PlayerCharacter_C::bCanHoldBreath' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, RecoverBreathTime) == 0x0006F0, "Member 'ABP_PlayerCharacter_C::RecoverBreathTime' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TryToHoldBreathTimer) == 0x0006F8, "Member 'ABP_PlayerCharacter_C::TryToHoldBreathTimer' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bWantsToHoldBreath) == 0x000700, "Member 'ABP_PlayerCharacter_C::bWantsToHoldBreath' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bShooting) == 0x000701, "Member 'ABP_PlayerCharacter_C::bShooting' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, BreathingStrength) == 0x000704, "Member 'ABP_PlayerCharacter_C::BreathingStrength' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bEnableBreathing) == 0x000708, "Member 'ABP_PlayerCharacter_C::bEnableBreathing' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Breathing_YawStrength) == 0x00070C, "Member 'ABP_PlayerCharacter_C::Breathing_YawStrength' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, Breathing_PitchStrength) == 0x000710, "Member 'ABP_PlayerCharacter_C::Breathing_PitchStrength' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bChangingWeapon) == 0x000714, "Member 'ABP_PlayerCharacter_C::bChangingWeapon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, SkillIcon) == 0x000718, "Member 'ABP_PlayerCharacter_C::SkillIcon' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, AssistList) == 0x000720, "Member 'ABP_PlayerCharacter_C::AssistList' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bEnableHealthRegeneration) == 0x000770, "Member 'ABP_PlayerCharacter_C::bEnableHealthRegeneration' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, HealthRegenTick) == 0x000774, "Member 'ABP_PlayerCharacter_C::HealthRegenTick' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, TimeToStartHealthRegeneration) == 0x000778, "Member 'ABP_PlayerCharacter_C::TimeToStartHealthRegeneration' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, bOnLadder) == 0x00077C, "Member 'ABP_PlayerCharacter_C::bOnLadder' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, FPPBasePosition) == 0x000780, "Member 'ABP_PlayerCharacter_C::FPPBasePosition' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, At_Ladder_Top_) == 0x00078C, "Member 'ABP_PlayerCharacter_C::At_Ladder_Top_' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ToggleSprint) == 0x00078D, "Member 'ABP_PlayerCharacter_C::ToggleSprint' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ToggleCrouch) == 0x00078E, "Member 'ABP_PlayerCharacter_C::ToggleCrouch' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, ToggleADS) == 0x00078F, "Member 'ABP_PlayerCharacter_C::ToggleADS' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, MovementType) == 0x000790, "Member 'ABP_PlayerCharacter_C::MovementType' has a wrong offset!");
static_assert(offsetof(ABP_PlayerCharacter_C, WasRunning) == 0x000791, "Member 'ABP_PlayerCharacter_C::WasRunning' has a wrong offset!");

}

