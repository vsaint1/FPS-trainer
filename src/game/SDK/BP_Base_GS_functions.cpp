#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Base_GS

#include "Basic.hpp"

#include "BP_Base_GS_classes.hpp"
#include "BP_Base_GS_parameters.hpp"


namespace SDK
{

// Function BP_Base_GS.BP_Base_GS_C.IsGameOver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// bool                                    bGameOver                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GS_C::IsGameOver(bool* bGameOver)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "IsGameOver");

	Params::BP_Base_GS_C_IsGameOver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bGameOver != nullptr)
		*bGameOver = Parms.bGameOver;
}


// Function BP_Base_GS.BP_Base_GS_C.GetWinnerTeam
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   WinnerTeam                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GS_C::GetWinnerTeam(int32* WinnerTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "GetWinnerTeam");

	Params::BP_Base_GS_C_GetWinnerTeam Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (WinnerTeam != nullptr)
		*WinnerTeam = Parms.WinnerTeam;
}


// Function BP_Base_GS.BP_Base_GS_C.OnRep_TeamBPoints
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::OnRep_TeamBPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "OnRep_TeamBPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.OnRep_TeamAPoints
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::OnRep_TeamAPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "OnRep_TeamAPoints");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.OnRep_GameTimeInSeconds
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::OnRep_GameTimeInSeconds()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "OnRep_GameTimeInSeconds");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.AddPlayerToReadyList
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PCReady                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GS_C::AddPlayerToReadyList(class APlayerController* PCReady)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "AddPlayerToReadyList");

	Params::BP_Base_GS_C_AddPlayerToReadyList Parms{};

	Parms.PCReady = PCReady;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GS.BP_Base_GS_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Base_GS_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.CheckElapsedTime
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::CheckElapsedTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "CheckElapsedTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.CheckBotsReadyToSpawn
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::CheckBotsReadyToSpawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "CheckBotsReadyToSpawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.StartMatch
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::StartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "StartMatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.UpdatePrematchTimer
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::UpdatePrematchTimer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "UpdatePrematchTimer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.OnStartMatch
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::OnStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "OnStartMatch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.UpdateTimeLeft
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::UpdateTimeLeft()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "UpdateTimeLeft");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.UpdateMatchTime
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::UpdateMatchTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "UpdateMatchTime");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.HandlePlayerDeath
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           DeadActor                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AController*                      Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GS_C::HandlePlayerDeath(int32 Team, class AActor* DeadActor, class AController* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "HandlePlayerDeath");

	Params::BP_Base_GS_C_HandlePlayerDeath Parms{};

	Parms.Team = Team;
	Parms.DeadActor = DeadActor;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GS.BP_Base_GS_C.GetObjectives
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::GetObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "GetObjectives");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.HandlePlayerChangeTeam
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::HandlePlayerChangeTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "HandlePlayerChangeTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.FlipTeams
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::FlipTeams()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "FlipTeams");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.AddTeamPoints
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GS_C::AddTeamPoints(int32 Team)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "AddTeamPoints");

	Params::BP_Base_GS_C_AddTeamPoints Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GS.BP_Base_GS_C.ExecuteUbergraph_BP_Base_GS
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GS_C::ExecuteUbergraph_BP_Base_GS(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "ExecuteUbergraph_BP_Base_GS");

	Params::BP_Base_GS_C_ExecuteUbergraph_BP_Base_GS Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GS.BP_Base_GS_C.UpdateScores__DelegateSignature
// (Public, Delegate, BlueprintCallable, BlueprintEvent)

void ABP_Base_GS_C::UpdateScores__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "UpdateScores__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GS.BP_Base_GS_C.GetTeamIcon
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UTexture*                         Icon                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GS_C::GetTeamIcon(int32 Team, class UTexture** Icon) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GS_C", "GetTeamIcon");

	Params::BP_Base_GS_C_GetTeamIcon Parms{};

	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	if (Icon != nullptr)
		*Icon = Parms.Icon;
}

}

