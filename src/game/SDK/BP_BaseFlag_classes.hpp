#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseFlag

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BaseFlag.BP_BaseFlag_C
// 0x0068 (0x0288 - 0x0220)
class ABP_BaseFlag_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetComponent*                       Widget;                                            // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Flag;                                              // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      Capsule;                                           // 0x0240(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	int32                                         Team;                                              // 0x0248(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                InitialPossition;                                  // 0x024C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               InitialRotation;                                   // 0x0258(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	bool                                          bFlagTaken;                                        // 0x0264(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_265[0x3];                                      // 0x0265(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseCharacter_C*                    PawnRef;                                           // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bActive;                                           // 0x0270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABP_BaseCharacter_C*                    Carrier;                                           // 0x0278(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	class UWB_CaptureTheFlag_UI_Icon_C*           Flag_WidgetIcon;                                   // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void OnRep_Carrier();
	void TryToAddPoint(bool* Success);
	void ReceiveBeginPlay();
	void BndEvt__Capsule_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void ResetFlag();
	void OnPlayerDeathEvent();
	void DropFlag();
	void ExecuteUbergraph_BP_BaseFlag(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BaseFlag_C">();
	}
	static class ABP_BaseFlag_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BaseFlag_C>();
	}
};
static_assert(alignof(ABP_BaseFlag_C) == 0x000008, "Wrong alignment on ABP_BaseFlag_C");
static_assert(sizeof(ABP_BaseFlag_C) == 0x000288, "Wrong size on ABP_BaseFlag_C");
static_assert(offsetof(ABP_BaseFlag_C, UberGraphFrame) == 0x000220, "Member 'ABP_BaseFlag_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, Widget) == 0x000228, "Member 'ABP_BaseFlag_C::Widget' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, Flag) == 0x000230, "Member 'ABP_BaseFlag_C::Flag' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, Root) == 0x000238, "Member 'ABP_BaseFlag_C::Root' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, Capsule) == 0x000240, "Member 'ABP_BaseFlag_C::Capsule' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, Team) == 0x000248, "Member 'ABP_BaseFlag_C::Team' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, InitialPossition) == 0x00024C, "Member 'ABP_BaseFlag_C::InitialPossition' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, InitialRotation) == 0x000258, "Member 'ABP_BaseFlag_C::InitialRotation' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, bFlagTaken) == 0x000264, "Member 'ABP_BaseFlag_C::bFlagTaken' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, PawnRef) == 0x000268, "Member 'ABP_BaseFlag_C::PawnRef' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, bActive) == 0x000270, "Member 'ABP_BaseFlag_C::bActive' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, Carrier) == 0x000278, "Member 'ABP_BaseFlag_C::Carrier' has a wrong offset!");
static_assert(offsetof(ABP_BaseFlag_C, Flag_WidgetIcon) == 0x000280, "Member 'ABP_BaseFlag_C::Flag_WidgetIcon' has a wrong offset!");

}

