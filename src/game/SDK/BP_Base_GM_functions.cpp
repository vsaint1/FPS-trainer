#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Base_GM

#include "Basic.hpp"

#include "BP_Base_GM_classes.hpp"
#include "BP_Base_GM_parameters.hpp"


namespace SDK
{

// Function BP_Base_GM.BP_Base_GM_C.DestroyGameModeActors
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::DestroyGameModeActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "DestroyGameModeActors");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.ChooseSpawnDM
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerSpawn_C*>        Spawns                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_PlayerSpawn_C*>        BestSpawns                                             (Parm, OutParm)

void ABP_Base_GM_C::ChooseSpawnDM(TArray<class ABP_PlayerSpawn_C*>& Spawns, int32 Team, TArray<class ABP_PlayerSpawn_C*>* BestSpawns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ChooseSpawnDM");

	Params::BP_Base_GM_C_ChooseSpawnDM Parms{};

	Parms.Spawns = std::move(Spawns);
	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	Spawns = std::move(Parms.Spawns);

	if (BestSpawns != nullptr)
		*BestSpawns = std::move(Parms.BestSpawns);
}


// Function BP_Base_GM.BP_Base_GM_C.AutoTeamBalanceUponDeath
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::AutoTeamBalanceUponDeath(class AController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "AutoTeamBalanceUponDeath");

	Params::BP_Base_GM_C_AutoTeamBalanceUponDeath Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.CheckTeamBalance
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    NoSwap                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::CheckTeamBalance(class AController* PlayerController, bool* NoSwap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "CheckTeamBalance");

	Params::BP_Base_GM_C_CheckTeamBalance Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);

	if (NoSwap != nullptr)
		*NoSwap = Parms.NoSwap;
}


// Function BP_Base_GM.BP_Base_GM_C.GetDefaultPawnClassForController
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      InController                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

class UClass* ABP_Base_GM_C::GetDefaultPawnClassForController(class AController* InController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "GetDefaultPawnClassForController");

	Params::BP_Base_GM_C_GetDefaultPawnClassForController Parms{};

	Parms.InController = InController;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Base_GM.BP_Base_GM_C.SetGameWithBots
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bAllowBots_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::SetGameWithBots(bool bAllowBots_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SetGameWithBots");

	Params::BP_Base_GM_C_SetGameWithBots Parms{};

	Parms.bAllowBots_0 = bAllowBots_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.SetGameOver
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bGameOver_0                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::SetGameOver(bool bGameOver_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SetGameOver");

	Params::BP_Base_GM_C_SetGameOver Parms{};

	Parms.bGameOver_0 = bGameOver_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.SetFriedlyFire
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bFriendlyFire_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::SetFriedlyFire(bool bFriendlyFire_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SetFriedlyFire");

	Params::BP_Base_GM_C_SetFriedlyFire Parms{};

	Parms.bFriendlyFire_0 = bFriendlyFire_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.ShowCharacterSelection Screen
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::ShowCharacterSelection_Screen(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ShowCharacterSelection Screen");

	Params::BP_Base_GM_C_ShowCharacterSelection_Screen Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.SetAIDifficulty
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::SetAIDifficulty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SetAIDifficulty");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.AutoBalanceTeam
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::AutoBalanceTeam()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "AutoBalanceTeam");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.AutoTeamBalance_InitialTeam
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AController*                      PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::AutoTeamBalance_InitialTeam(class AController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "AutoTeamBalance_InitialTeam");

	Params::BP_Base_GM_C_AutoTeamBalance_InitialTeam Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.HandleFriendlyFireDamage
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Damage                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   DamageToDo                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::HandleFriendlyFireDamage(float Damage, float* DamageToDo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "HandleFriendlyFireDamage");

	Params::BP_Base_GM_C_HandleFriendlyFireDamage Parms{};

	Parms.Damage = Damage;

	UObject::ProcessEvent(Func, &Parms);

	if (DamageToDo != nullptr)
		*DamageToDo = Parms.DamageToDo;
}


// Function BP_Base_GM.BP_Base_GM_C.OverrideNumberOfBots
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TeamA                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   TeamB                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::OverrideNumberOfBots(int32 TeamA, int32 TeamB)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "OverrideNumberOfBots");

	Params::BP_Base_GM_C_OverrideNumberOfBots Parms{};

	Parms.TeamA = TeamA;
	Parms.TeamB = TeamB;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.OnRep_AllPlayersPCs
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::OnRep_AllPlayersPCs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "OnRep_AllPlayersPCs");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.DestroyBotsPlayerState
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::DestroyBotsPlayerState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "DestroyBotsPlayerState");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.UnpossesBots
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::UnpossesBots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "UnpossesBots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.ReadyToStartMatch
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_Base_GM_C::ReadyToStartMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ReadyToStartMatch");

	Params::BP_Base_GM_C_ReadyToStartMatch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Base_GM.BP_Base_GM_C.ReadyToEndMatch
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor)

bool ABP_Base_GM_C::ReadyToEndMatch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ReadyToEndMatch");

	Params::BP_Base_GM_C_ReadyToEndMatch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function BP_Base_GM.BP_Base_GM_C.SendKillFeedInfo
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Kill                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Vic                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DmgType                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Assist                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadshot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::SendKillFeedInfo(class APlayerState* Kill, class APlayerState* Vic, const class UDamageType* DmgType, class APlayerState* Assist, bool bHeadshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SendKillFeedInfo");

	Params::BP_Base_GM_C_SendKillFeedInfo Parms{};

	Parms.Kill = Kill;
	Parms.Vic = Vic;
	Parms.DmgType = DmgType;
	Parms.Assist = Assist;
	Parms.bHeadshot = bHeadshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.PossesPawn
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Pawn                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                Controller                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FTransform                       Transform                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::PossesPawn(class AActor* Pawn, class APlayerController* Controller, const struct FTransform& Transform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "PossesPawn");

	Params::BP_Base_GM_C_PossesPawn Parms{};

	Parms.Pawn = Pawn;
	Parms.Controller = Controller;
	Parms.Transform = std::move(Transform);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.ChooseSpawn
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ABP_PlayerSpawn_C*>        Spawns                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_PlayerSpawn_C*>        BestSpawns                                             (Parm, OutParm)

void ABP_Base_GM_C::ChooseSpawn(TArray<class ABP_PlayerSpawn_C*>& Spawns, int32 Team, TArray<class ABP_PlayerSpawn_C*>* BestSpawns)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ChooseSpawn");

	Params::BP_Base_GM_C_ChooseSpawn Parms{};

	Parms.Spawns = std::move(Spawns);
	Parms.Team = Team;

	UObject::ProcessEvent(Func, &Parms);

	Spawns = std::move(Parms.Spawns);

	if (BestSpawns != nullptr)
		*BestSpawns = std::move(Parms.BestSpawns);
}


// Function BP_Base_GM.BP_Base_GM_C.GetPlayerSpawns
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FFA                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::GetPlayerSpawns(bool FFA)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "GetPlayerSpawns");

	Params::BP_Base_GM_C_GetPlayerSpawns Parms{};

	Parms.FFA = FFA;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.AllPosibleSpawns
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::AllPosibleSpawns(class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "AllPosibleSpawns");

	Params::BP_Base_GM_C_AllPosibleSpawns Parms{};

	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.SpawnCharacterPawn
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTransform                       SpawnTransform                                         (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
// EPlayerClass                            Player_Class                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                PC                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::SpawnCharacterPawn(const struct FTransform& SpawnTransform, EPlayerClass Player_Class, class APlayerController* PC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SpawnCharacterPawn");

	Params::BP_Base_GM_C_SpawnCharacterPawn Parms{};

	Parms.SpawnTransform = std::move(SpawnTransform);
	Parms.Player_Class = Player_Class;
	Parms.PC = PC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.Team Posible Spawn
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Team                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<class ABP_PlayerSpawn_C*>        TeamSpawns                                             (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// bool                                    Bots                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// TArray<class ABP_PlayerSpawn_C*>        PosibleSpawn                                           (Parm, OutParm)

void ABP_Base_GM_C::Team_Posible_Spawn(int32 Team, TArray<class ABP_PlayerSpawn_C*>& TeamSpawns, bool Bots, TArray<class ABP_PlayerSpawn_C*>* PosibleSpawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "Team Posible Spawn");

	Params::BP_Base_GM_C_Team_Posible_Spawn Parms{};

	Parms.Team = Team;
	Parms.TeamSpawns = std::move(TeamSpawns);
	Parms.Bots = Bots;

	UObject::ProcessEvent(Func, &Parms);

	TeamSpawns = std::move(Parms.TeamSpawns);

	if (PosibleSpawn != nullptr)
		*PosibleSpawn = std::move(Parms.PosibleSpawn);
}


// Function BP_Base_GM.BP_Base_GM_C.TimeDilationTimeline__FinishedFunc
// (BlueprintEvent)

void ABP_Base_GM_C::TimeDilationTimeline__FinishedFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "TimeDilationTimeline__FinishedFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.TimeDilationTimeline__UpdateFunc
// (BlueprintEvent)

void ABP_Base_GM_C::TimeDilationTimeline__UpdateFunc()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "TimeDilationTimeline__UpdateFunc");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.CheckGameOptions
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::CheckGameOptions()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "CheckGameOptions");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.ManageNumberOfBots
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::ManageNumberOfBots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ManageNumberOfBots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.SVR_SetPointsToWin
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   PointsToWin                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::SVR_SetPointsToWin(int32 PointsToWin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SVR_SetPointsToWin");

	Params::BP_Base_GM_C_SVR_SetPointsToWin Parms{};

	Parms.PointsToWin = PointsToWin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.CreateBots
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::CreateBots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "CreateBots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.SpawnBots
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::SpawnBots()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SpawnBots");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.SpawnPlayers
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::SpawnPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SpawnPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.SpawnCharacterWithClass
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerClass                            PlayerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::SpawnCharacterWithClass(EPlayerClass PlayerClass, class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SpawnCharacterWithClass");

	Params::BP_Base_GM_C_SpawnCharacterWithClass Parms{};

	Parms.PlayerClass = PlayerClass;
	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.SpawnPlayerClass
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerClass                            PlayerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerController*                PlayerController                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::SpawnPlayerClass(EPlayerClass PlayerClass, class APlayerController* PlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "SpawnPlayerClass");

	Params::BP_Base_GM_C_SpawnPlayerClass Parms{};

	Parms.PlayerClass = PlayerClass;
	Parms.PlayerController = PlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.Server_KickAllPlayers
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::Server_KickAllPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "Server_KickAllPlayers");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.Server_RemovePC
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController*                NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::Server_RemovePC(class APlayerController* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "Server_RemovePC");

	Params::BP_Base_GM_C_Server_RemovePC Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.K2_OnLogout
// (Event, Public, BlueprintEvent)
// Parameters:
// class AController*                      ExitingController                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::K2_OnLogout(class AController* ExitingController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "K2_OnLogout");

	Params::BP_Base_GM_C_K2_OnLogout Parms{};

	Parms.ExitingController = ExitingController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.Server_EndGame
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::Server_EndGame()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "Server_EndGame");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.HandleStartingNewPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::HandleStartingNewPlayer(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "HandleStartingNewPlayer");

	Params::BP_Base_GM_C_HandleStartingNewPlayer Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_Base_GM_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.ResetGame
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delay                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::ResetGame(float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ResetGame");

	Params::BP_Base_GM_C_ResetGame Parms{};

	Parms.Delay = Delay;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.Server_ResetSpawns
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::Server_ResetSpawns()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "Server_ResetSpawns");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.Server_GetKillFeedText
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Kill                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Vic                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DmgType                                                (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Assist                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadshot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::Server_GetKillFeedText(class APlayerState* Kill, class APlayerState* Vic, const class UDamageType* DmgType, class APlayerState* Assist, bool bHeadshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "Server_GetKillFeedText");

	Params::BP_Base_GM_C_Server_GetKillFeedText Parms{};

	Parms.Kill = Kill;
	Parms.Vic = Vic;
	Parms.DmgType = DmgType;
	Parms.Assist = Assist;
	Parms.bHeadshot = bHeadshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.Server_UpdateScores
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::Server_UpdateScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "Server_UpdateScores");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.InitializeHUDForPlayer
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::InitializeHUDForPlayer(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "InitializeHUDForPlayer");

	Params::BP_Base_GM_C_InitializeHUDForPlayer Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.Server_SendChatMessage
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             TextToSend                                             (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_Base_GM_C::Server_SendChatMessage(const class FText& TextToSend)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "Server_SendChatMessage");

	Params::BP_Base_GM_C_Server_SendChatMessage Parms{};

	Parms.TextToSend = std::move(TextToSend);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.K2_PostLogin
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerController*                NewPlayer                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::K2_PostLogin(class APlayerController* NewPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "K2_PostLogin");

	Params::BP_Base_GM_C_K2_PostLogin Parms{};

	Parms.NewPlayer = NewPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.K2_OnSetMatchState
// (Event, Protected, BlueprintEvent)
// Parameters:
// class FName                             NewState                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::K2_OnSetMatchState(class FName NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "K2_OnSetMatchState");

	Params::BP_Base_GM_C_K2_OnSetMatchState Parms{};

	Parms.NewState = NewState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.StartSlomo
// (BlueprintCallable, BlueprintEvent)

void ABP_Base_GM_C::StartSlomo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "StartSlomo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_Base_GM.BP_Base_GM_C.ExecuteUbergraph_BP_Base_GM
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_Base_GM_C::ExecuteUbergraph_BP_Base_GM(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "ExecuteUbergraph_BP_Base_GM");

	Params::BP_Base_GM_C_ExecuteUbergraph_BP_Base_GM Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_Base_GM.BP_Base_GM_C.GetGameWithBots
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bGameWithBots                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::GetGameWithBots(bool* bGameWithBots) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "GetGameWithBots");

	Params::BP_Base_GM_C_GetGameWithBots Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bGameWithBots != nullptr)
		*bGameWithBots = Parms.bGameWithBots;
}


// Function BP_Base_GM.BP_Base_GM_C.IsGameOver
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bGameOver_0                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::IsGameOver(bool* bGameOver_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "IsGameOver");

	Params::BP_Base_GM_C_IsGameOver Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bGameOver_0 != nullptr)
		*bGameOver_0 = Parms.bGameOver_0;
}


// Function BP_Base_GM.BP_Base_GM_C.IsFriendlyFireEnabled
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bEnabled                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_Base_GM_C::IsFriendlyFireEnabled(bool* bEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_Base_GM_C", "IsFriendlyFireEnabled");

	Params::BP_Base_GM_C_IsFriendlyFireEnabled Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bEnabled != nullptr)
		*bEnabled = Parms.bEnabled;
}

}

