#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ABP_Base_TPP

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function ABP_Base_TPP.ABP_Base_TPP_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct ABP_Base_TPP_C_AnimGraph final
{
public:
	struct FPoseLink                              AnimGraph_0;                                       // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(ABP_Base_TPP_C_AnimGraph) == 0x000008, "Wrong alignment on ABP_Base_TPP_C_AnimGraph");
static_assert(sizeof(ABP_Base_TPP_C_AnimGraph) == 0x000010, "Wrong size on ABP_Base_TPP_C_AnimGraph");
static_assert(offsetof(ABP_Base_TPP_C_AnimGraph, AnimGraph_0) == 0x000000, "Member 'ABP_Base_TPP_C_AnimGraph::AnimGraph_0' has a wrong offset!");

// Function ABP_Base_TPP.ABP_Base_TPP_C.MakeNosieEvent
// 0x0038 (0x0038 - 0x0000)
struct ABP_Base_TPP_C_MakeNosieEvent final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_1;                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_float_Variable_2;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_float_Variable_3;                             // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0020(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default_1;                           // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Base_TPP_C_MakeNosieEvent) == 0x000008, "Wrong alignment on ABP_Base_TPP_C_MakeNosieEvent");
static_assert(sizeof(ABP_Base_TPP_C_MakeNosieEvent) == 0x000038, "Wrong size on ABP_Base_TPP_C_MakeNosieEvent");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, Temp_bool_Variable) == 0x000000, "Member 'ABP_Base_TPP_C_MakeNosieEvent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, Temp_float_Variable) == 0x000004, "Member 'ABP_Base_TPP_C_MakeNosieEvent::Temp_float_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, Temp_float_Variable_1) == 0x000008, "Member 'ABP_Base_TPP_C_MakeNosieEvent::Temp_float_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, Temp_bool_Variable_1) == 0x00000C, "Member 'ABP_Base_TPP_C_MakeNosieEvent::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, Temp_float_Variable_2) == 0x000010, "Member 'ABP_Base_TPP_C_MakeNosieEvent::Temp_float_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, Temp_float_Variable_3) == 0x000014, "Member 'ABP_Base_TPP_C_MakeNosieEvent::Temp_float_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000018, "Member 'ABP_Base_TPP_C_MakeNosieEvent::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000020, "Member 'ABP_Base_TPP_C_MakeNosieEvent::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, K2Node_Select_Default) == 0x00002C, "Member 'ABP_Base_TPP_C_MakeNosieEvent::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_MakeNosieEvent, K2Node_Select_Default_1) == 0x000030, "Member 'ABP_Base_TPP_C_MakeNosieEvent::K2Node_Select_Default_1' has a wrong offset!");

// Function ABP_Base_TPP.ABP_Base_TPP_C.PlayFootstepSound
// 0x0190 (0x0190 - 0x0000)
struct ABP_Base_TPP_C_PlayFootstepSound final
{
public:
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x0000(0x0010)(ConstParm, ReferenceParm)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	EPhysicalSurface                              Temp_byte_Variable;                                // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             Temp_object_Variable_1;                            // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_2;                            // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_3;                            // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_4;                            // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_5;                            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class USoundBase*                             Temp_object_Variable_6;                            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0048(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x0054(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FHitResult                             CallFunc_LineTraceSingle_OutHit;                   // 0x0060(0x0088)(IsPlainOldData, NoDestructor, ContainsInstancedReference)
	bool                                          CallFunc_LineTraceSingle_ReturnValue;              // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bBlockingHit;              // 0x00E9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_BreakHitResult_bInitialOverlap;           // 0x00EA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_EB[0x1];                                       // 0x00EB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_BreakHitResult_Time;                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakHitResult_Distance;                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Location;                  // 0x00F4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactPoint;               // 0x0100(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_Normal;                    // 0x010C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_ImpactNormal;              // 0x0118(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      CallFunc_BreakHitResult_PhysMat;                   // 0x0128(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_BreakHitResult_HitActor;                  // 0x0130(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    CallFunc_BreakHitResult_HitComponent;              // 0x0138(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   CallFunc_BreakHitResult_HitBoneName;               // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_HitItem;                   // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_ElementIndex;              // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_BreakHitResult_FaceIndex;                 // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceStart;                // 0x0154(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_BreakHitResult_TraceEnd;                  // 0x0160(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_GetPlayerPawn_ReturnValue;                // 0x0170(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0178(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USoundBase*                             K2Node_Select_Default;                             // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UAudioComponent*                        CallFunc_SpawnSoundAttached_ReturnValue;           // 0x0188(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Base_TPP_C_PlayFootstepSound) == 0x000008, "Wrong alignment on ABP_Base_TPP_C_PlayFootstepSound");
static_assert(sizeof(ABP_Base_TPP_C_PlayFootstepSound) == 0x000190, "Wrong size on ABP_Base_TPP_C_PlayFootstepSound");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, Temp_object_Variable) == 0x000000, "Member 'ABP_Base_TPP_C_PlayFootstepSound::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, Temp_byte_Variable) == 0x000011, "Member 'ABP_Base_TPP_C_PlayFootstepSound::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, Temp_object_Variable_1) == 0x000018, "Member 'ABP_Base_TPP_C_PlayFootstepSound::Temp_object_Variable_1' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, Temp_object_Variable_2) == 0x000020, "Member 'ABP_Base_TPP_C_PlayFootstepSound::Temp_object_Variable_2' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, Temp_object_Variable_3) == 0x000028, "Member 'ABP_Base_TPP_C_PlayFootstepSound::Temp_object_Variable_3' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, Temp_object_Variable_4) == 0x000030, "Member 'ABP_Base_TPP_C_PlayFootstepSound::Temp_object_Variable_4' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, Temp_object_Variable_5) == 0x000038, "Member 'ABP_Base_TPP_C_PlayFootstepSound::Temp_object_Variable_5' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, Temp_object_Variable_6) == 0x000040, "Member 'ABP_Base_TPP_C_PlayFootstepSound::Temp_object_Variable_6' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000048, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_Subtract_VectorVector_ReturnValue) == 0x000054, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_LineTraceSingle_OutHit) == 0x000060, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_LineTraceSingle_OutHit' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_LineTraceSingle_ReturnValue) == 0x0000E8, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_LineTraceSingle_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_bBlockingHit) == 0x0000E9, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_bBlockingHit' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_bInitialOverlap) == 0x0000EA, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_bInitialOverlap' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_Time) == 0x0000EC, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_Time' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_Distance) == 0x0000F0, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_Distance' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_Location) == 0x0000F4, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_Location' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_ImpactPoint) == 0x000100, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_ImpactPoint' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_Normal) == 0x00010C, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_Normal' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_ImpactNormal) == 0x000118, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_ImpactNormal' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_PhysMat) == 0x000128, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_PhysMat' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_HitActor) == 0x000130, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_HitActor' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_HitComponent) == 0x000138, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_HitComponent' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_HitBoneName) == 0x000140, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_HitBoneName' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_HitItem) == 0x000148, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_HitItem' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_ElementIndex) == 0x00014C, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_ElementIndex' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_FaceIndex) == 0x000150, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_FaceIndex' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_TraceStart) == 0x000154, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_TraceStart' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_BreakHitResult_TraceEnd) == 0x000160, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_BreakHitResult_TraceEnd' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_GetPlayerPawn_ReturnValue) == 0x000170, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_GetPlayerPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000178, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, K2Node_Select_Default) == 0x000180, "Member 'ABP_Base_TPP_C_PlayFootstepSound::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_PlayFootstepSound, CallFunc_SpawnSoundAttached_ReturnValue) == 0x000188, "Member 'ABP_Base_TPP_C_PlayFootstepSound::CallFunc_SpawnSoundAttached_ReturnValue' has a wrong offset!");

// Function ABP_Base_TPP.ABP_Base_TPP_C.SetPawnInfo
// 0x0090 (0x0090 - 0x0000)
struct ABP_Base_TPP_C_SetPawnInfo final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Abs_ReturnValue;                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_NormalizeToRange_ReturnValue;             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_FClamp_ReturnValue;                       // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue;          // 0x0018(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_GetBaseAimRotation_ReturnValue;           // 0x0028(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FRotator                               CallFunc_NormalizedDeltaRotator_ReturnValue;       // 0x0034(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetCurrentAcceleration_ReturnValue;       // 0x004C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue;                        // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPawnMovementComponent*                 CallFunc_GetMovementComponent_ReturnValue;         // 0x0060(0x0008)(ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_K2_GetActorRotation_ReturnValue_1;        // 0x0068(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_IsFalling_ReturnValue;                    // 0x0074(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_75[0x3];                                       // 0x0075(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetVelocity_ReturnValue;                  // 0x0078(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_CalculateDirection_ReturnValue;           // 0x0084(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_VSize_ReturnValue_1;                      // 0x0088(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Base_TPP_C_SetPawnInfo) == 0x000008, "Wrong alignment on ABP_Base_TPP_C_SetPawnInfo");
static_assert(sizeof(ABP_Base_TPP_C_SetPawnInfo) == 0x000090, "Wrong size on ABP_Base_TPP_C_SetPawnInfo");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_Abs_ReturnValue) == 0x000004, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_Abs_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_BooleanAND_ReturnValue) == 0x000008, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_NormalizeToRange_ReturnValue) == 0x00000C, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_NormalizeToRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_FClamp_ReturnValue) == 0x000010, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_IsValid_ReturnValue) == 0x000014, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_K2_GetActorRotation_ReturnValue) == 0x000018, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_K2_GetActorRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000024, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_GetBaseAimRotation_ReturnValue) == 0x000028, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_GetBaseAimRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_NormalizedDeltaRotator_ReturnValue) == 0x000034, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_NormalizedDeltaRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_BreakRotator_Roll) == 0x000040, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_BreakRotator_Pitch) == 0x000044, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_BreakRotator_Yaw) == 0x000048, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_GetCurrentAcceleration_ReturnValue) == 0x00004C, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_GetCurrentAcceleration_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_VSize_ReturnValue) == 0x000058, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_VSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_GetMovementComponent_ReturnValue) == 0x000060, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_GetMovementComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_K2_GetActorRotation_ReturnValue_1) == 0x000068, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_K2_GetActorRotation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_IsFalling_ReturnValue) == 0x000074, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_IsFalling_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_GetVelocity_ReturnValue) == 0x000078, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_GetVelocity_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_CalculateDirection_ReturnValue) == 0x000084, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_CalculateDirection_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_SetPawnInfo, CallFunc_VSize_ReturnValue_1) == 0x000088, "Member 'ABP_Base_TPP_C_SetPawnInfo::CallFunc_VSize_ReturnValue_1' has a wrong offset!");

// Function ABP_Base_TPP.ABP_Base_TPP_C.BlueprintUpdateAnimation
// 0x0004 (0x0004 - 0x0000)
struct ABP_Base_TPP_C_BlueprintUpdateAnimation final
{
public:
	float                                         DeltaTimeX;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ABP_Base_TPP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong alignment on ABP_Base_TPP_C_BlueprintUpdateAnimation");
static_assert(sizeof(ABP_Base_TPP_C_BlueprintUpdateAnimation) == 0x000004, "Wrong size on ABP_Base_TPP_C_BlueprintUpdateAnimation");
static_assert(offsetof(ABP_Base_TPP_C_BlueprintUpdateAnimation, DeltaTimeX) == 0x000000, "Member 'ABP_Base_TPP_C_BlueprintUpdateAnimation::DeltaTimeX' has a wrong offset!");

// Function ABP_Base_TPP.ABP_Base_TPP_C.ExecuteUbergraph_ABP_Base_TPP
// 0x00E0 (0x00E0 - 0x0000)
struct ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPawnActions_C>       K2Node_DynamicCast_AsI_Pawn_Actions;               // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPawnActions_C>       K2Node_DynamicCast_AsI_Pawn_Actions_1;             // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_DeltaTimeX;                           // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue;              // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ABP_BaseCharacter_C*                    K2Node_DynamicCast_AsBP_Base_Character;            // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_1;            // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_TryGetPawnOwner_ReturnValue_2;            // 0x0060(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TScriptInterface<class IIPawnActions_C>       K2Node_DynamicCast_AsI_Pawn_Actions_2;             // 0x0068(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_3;                     // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPawnActions_C>       K2Node_DynamicCast_AsI_Pawn_Actions_3;             // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_4;                     // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPawnActions_C>       K2Node_DynamicCast_AsI_Pawn_Actions_4;             // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_5;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPawnActions_C>       K2Node_DynamicCast_AsI_Pawn_Actions_5;             // 0x00B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_6;                     // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IIPawnActions_C>       K2Node_DynamicCast_AsI_Pawn_Actions_6;             // 0x00C8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	bool                                          K2Node_DynamicCast_bSuccess_7;                     // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP) == 0x000008, "Wrong alignment on ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP");
static_assert(sizeof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP) == 0x0000E0, "Wrong size on ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, EntryPoint) == 0x000000, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::EntryPoint' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_AsI_Pawn_Actions) == 0x000008, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_AsI_Pawn_Actions' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_AsI_Pawn_Actions_1) == 0x000020, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_AsI_Pawn_Actions_1' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_bSuccess_1) == 0x000030, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_Event_DeltaTimeX) == 0x000034, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_Event_DeltaTimeX' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, CallFunc_TryGetPawnOwner_ReturnValue) == 0x000038, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::CallFunc_TryGetPawnOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_AsBP_Base_Character) == 0x000040, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_AsBP_Base_Character' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_bSuccess_2) == 0x000048, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, CallFunc_TryGetPawnOwner_ReturnValue_1) == 0x000050, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::CallFunc_TryGetPawnOwner_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, CallFunc_HasAuthority_ReturnValue) == 0x000058, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, CallFunc_TryGetPawnOwner_ReturnValue_2) == 0x000060, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::CallFunc_TryGetPawnOwner_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_AsI_Pawn_Actions_2) == 0x000068, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_AsI_Pawn_Actions_2' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_bSuccess_3) == 0x000078, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_bSuccess_3' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000079, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_AsI_Pawn_Actions_3) == 0x000080, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_AsI_Pawn_Actions_3' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_bSuccess_4) == 0x000090, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_bSuccess_4' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_AsI_Pawn_Actions_4) == 0x000098, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_AsI_Pawn_Actions_4' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_bSuccess_5) == 0x0000A8, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_bSuccess_5' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_AsI_Pawn_Actions_5) == 0x0000B0, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_AsI_Pawn_Actions_5' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_bSuccess_6) == 0x0000C0, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_bSuccess_6' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_AsI_Pawn_Actions_6) == 0x0000C8, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_AsI_Pawn_Actions_6' has a wrong offset!");
static_assert(offsetof(ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP, K2Node_DynamicCast_bSuccess_7) == 0x0000D8, "Member 'ABP_Base_TPP_C_ExecuteUbergraph_ABP_Base_TPP::K2Node_DynamicCast_bSuccess_7' has a wrong offset!");

}

