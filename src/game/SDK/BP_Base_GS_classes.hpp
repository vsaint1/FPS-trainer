#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Base_GS

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EGameModeNames_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Base_GS.BP_Base_GS_C
// 0x0140 (0x03D0 - 0x0290)
class ABP_Base_GS_C : public AGameState
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0290(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0298(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	TArray<class APlayerController*>              PlayersReadyToSpawn;                               // 0x02A0(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate)
	struct FTimerHandle                           TimeToSpawnHandler;                                // 0x02B0(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FTimerHandle                           TimeLimitHandler;                                  // 0x02B8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	TArray<class AController*>                    BotsReadyToSpawn;                                  // 0x02C0(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	float                                         RespawnTime;                                       // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AController*>                    BotsTeamAControllers;                              // 0x02D8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class AController*>                    BotsTeamBControllers;                              // 0x02E8(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	struct FTimerHandle                           PreMatchTimerHandle;                               // 0x02F8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLeftToStartMatch;                              // 0x0300(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UpdateCountDownTimerHandle;                        // 0x0308(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	float                                         GameTimeInSeconds;                                 // 0x0310(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	float                                         PreMatchTime;                                      // 0x0314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EGameModeNames                                CurrentGameMode;                                   // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Objectives;                                        // 0x0320(0x0010)(Edit, BlueprintVisible, Net, DisableEditOnTemplate, DisableEditOnInstance)
	bool                                          bCanChangeTeam;                                    // 0x0330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)
	uint8                                         Pad_331[0x7];                                      // 0x0331(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GameModeWidget;                                    // 0x0338(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeLeftForNextSpawn;                              // 0x0340(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_344[0x4];                                      // 0x0344(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UTexture*>                  TeamIcons;                                         // 0x0348(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TeamAPoints;                                       // 0x0398(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamBPoints;                                       // 0x039C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             UpdateScores;                                      // 0x03A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	int32                                         PointsToWin;                                       // 0x03B0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3B4[0x4];                                      // 0x03B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 GameScoresWidget;                                  // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 EndGameScores;                                     // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TimeBetweenRounds;                                 // 0x03C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          FriendlyFire;                                      // 0x03CC(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor)

public:
	void IsGameOver(bool* bGameOver);
	void GetWinnerTeam(int32* WinnerTeam);
	void OnRep_TeamBPoints();
	void OnRep_TeamAPoints();
	void OnRep_GameTimeInSeconds();
	void AddPlayerToReadyList(class APlayerController* PCReady);
	void ReceiveBeginPlay();
	void CheckElapsedTime();
	void CheckBotsReadyToSpawn();
	void StartMatch();
	void UpdatePrematchTimer();
	void OnStartMatch();
	void UpdateTimeLeft();
	void UpdateMatchTime();
	void HandlePlayerDeath(int32 Team, class AActor* DeadActor, class AController* Instigator_0);
	void GetObjectives();
	void HandlePlayerChangeTeam();
	void FlipTeams();
	void AddTeamPoints(int32 Team);
	void ExecuteUbergraph_BP_Base_GS(int32 EntryPoint);
	void UpdateScores__DelegateSignature();

	void GetTeamIcon(int32 Team, class UTexture** Icon) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Base_GS_C">();
	}
	static class ABP_Base_GS_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Base_GS_C>();
	}
};
static_assert(alignof(ABP_Base_GS_C) == 0x000008, "Wrong alignment on ABP_Base_GS_C");
static_assert(sizeof(ABP_Base_GS_C) == 0x0003D0, "Wrong size on ABP_Base_GS_C");
static_assert(offsetof(ABP_Base_GS_C, UberGraphFrame) == 0x000290, "Member 'ABP_Base_GS_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, DefaultSceneRoot) == 0x000298, "Member 'ABP_Base_GS_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, PlayersReadyToSpawn) == 0x0002A0, "Member 'ABP_Base_GS_C::PlayersReadyToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, TimeToSpawnHandler) == 0x0002B0, "Member 'ABP_Base_GS_C::TimeToSpawnHandler' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, TimeLimitHandler) == 0x0002B8, "Member 'ABP_Base_GS_C::TimeLimitHandler' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, BotsReadyToSpawn) == 0x0002C0, "Member 'ABP_Base_GS_C::BotsReadyToSpawn' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, RespawnTime) == 0x0002D0, "Member 'ABP_Base_GS_C::RespawnTime' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, BotsTeamAControllers) == 0x0002D8, "Member 'ABP_Base_GS_C::BotsTeamAControllers' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, BotsTeamBControllers) == 0x0002E8, "Member 'ABP_Base_GS_C::BotsTeamBControllers' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, PreMatchTimerHandle) == 0x0002F8, "Member 'ABP_Base_GS_C::PreMatchTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, TimeLeftToStartMatch) == 0x000300, "Member 'ABP_Base_GS_C::TimeLeftToStartMatch' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, UpdateCountDownTimerHandle) == 0x000308, "Member 'ABP_Base_GS_C::UpdateCountDownTimerHandle' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, GameTimeInSeconds) == 0x000310, "Member 'ABP_Base_GS_C::GameTimeInSeconds' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, PreMatchTime) == 0x000314, "Member 'ABP_Base_GS_C::PreMatchTime' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, CurrentGameMode) == 0x000318, "Member 'ABP_Base_GS_C::CurrentGameMode' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, Objectives) == 0x000320, "Member 'ABP_Base_GS_C::Objectives' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, bCanChangeTeam) == 0x000330, "Member 'ABP_Base_GS_C::bCanChangeTeam' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, GameModeWidget) == 0x000338, "Member 'ABP_Base_GS_C::GameModeWidget' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, TimeLeftForNextSpawn) == 0x000340, "Member 'ABP_Base_GS_C::TimeLeftForNextSpawn' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, TeamIcons) == 0x000348, "Member 'ABP_Base_GS_C::TeamIcons' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, TeamAPoints) == 0x000398, "Member 'ABP_Base_GS_C::TeamAPoints' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, TeamBPoints) == 0x00039C, "Member 'ABP_Base_GS_C::TeamBPoints' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, UpdateScores) == 0x0003A0, "Member 'ABP_Base_GS_C::UpdateScores' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, PointsToWin) == 0x0003B0, "Member 'ABP_Base_GS_C::PointsToWin' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, GameScoresWidget) == 0x0003B8, "Member 'ABP_Base_GS_C::GameScoresWidget' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, EndGameScores) == 0x0003C0, "Member 'ABP_Base_GS_C::EndGameScores' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, TimeBetweenRounds) == 0x0003C8, "Member 'ABP_Base_GS_C::TimeBetweenRounds' has a wrong offset!");
static_assert(offsetof(ABP_Base_GS_C, FriendlyFire) == 0x0003CC, "Member 'ABP_Base_GS_C::FriendlyFire' has a wrong offset!");

}

