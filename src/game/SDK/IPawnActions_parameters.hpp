#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IPawnActions

#include "Basic.hpp"

#include "EAmmoType_structs.hpp"


namespace SDK::Params
{

// Function iPawnActions.iPawnActions_C.GetCurrentWeapon
// 0x0008 (0x0008 - 0x0000)
struct IPawnActions_C_GetCurrentWeapon final
{
public:
	class ABP_BaseWeapon_C*                       CurrentWeapon;                                     // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IPawnActions_C_GetCurrentWeapon) == 0x000008, "Wrong alignment on IPawnActions_C_GetCurrentWeapon");
static_assert(sizeof(IPawnActions_C_GetCurrentWeapon) == 0x000008, "Wrong size on IPawnActions_C_GetCurrentWeapon");
static_assert(offsetof(IPawnActions_C_GetCurrentWeapon, CurrentWeapon) == 0x000000, "Member 'IPawnActions_C_GetCurrentWeapon::CurrentWeapon' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.IsAiming
// 0x0001 (0x0001 - 0x0000)
struct IPawnActions_C_IsAiming final
{
public:
	bool                                          bAiming;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IPawnActions_C_IsAiming) == 0x000001, "Wrong alignment on IPawnActions_C_IsAiming");
static_assert(sizeof(IPawnActions_C_IsAiming) == 0x000001, "Wrong size on IPawnActions_C_IsAiming");
static_assert(offsetof(IPawnActions_C_IsAiming, bAiming) == 0x000000, "Member 'IPawnActions_C_IsAiming::bAiming' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.UsingTPP
// 0x0001 (0x0001 - 0x0000)
struct IPawnActions_C_UsingTPP final
{
public:
	bool                                          bUsingTPP;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IPawnActions_C_UsingTPP) == 0x000001, "Wrong alignment on IPawnActions_C_UsingTPP");
static_assert(sizeof(IPawnActions_C_UsingTPP) == 0x000001, "Wrong size on IPawnActions_C_UsingTPP");
static_assert(offsetof(IPawnActions_C_UsingTPP, bUsingTPP) == 0x000000, "Member 'IPawnActions_C_UsingTPP::bUsingTPP' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.ShowHitMarker
// 0x0001 (0x0001 - 0x0000)
struct IPawnActions_C_ShowHitMarker final
{
public:
	bool                                          bIsVehicle;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IPawnActions_C_ShowHitMarker) == 0x000001, "Wrong alignment on IPawnActions_C_ShowHitMarker");
static_assert(sizeof(IPawnActions_C_ShowHitMarker) == 0x000001, "Wrong size on IPawnActions_C_ShowHitMarker");
static_assert(offsetof(IPawnActions_C_ShowHitMarker, bIsVehicle) == 0x000000, "Member 'IPawnActions_C_ShowHitMarker::bIsVehicle' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.CharacterNeedsExplosives
// 0x0001 (0x0001 - 0x0000)
struct IPawnActions_C_CharacterNeedsExplosives final
{
public:
	bool                                          bNeedsExplosives;                                  // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IPawnActions_C_CharacterNeedsExplosives) == 0x000001, "Wrong alignment on IPawnActions_C_CharacterNeedsExplosives");
static_assert(sizeof(IPawnActions_C_CharacterNeedsExplosives) == 0x000001, "Wrong size on IPawnActions_C_CharacterNeedsExplosives");
static_assert(offsetof(IPawnActions_C_CharacterNeedsExplosives, bNeedsExplosives) == 0x000000, "Member 'IPawnActions_C_CharacterNeedsExplosives::bNeedsExplosives' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.CharacterdNeedsAmmo
// 0x0001 (0x0001 - 0x0000)
struct IPawnActions_C_CharacterdNeedsAmmo final
{
public:
	bool                                          bNeedsAmmo;                                        // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IPawnActions_C_CharacterdNeedsAmmo) == 0x000001, "Wrong alignment on IPawnActions_C_CharacterdNeedsAmmo");
static_assert(sizeof(IPawnActions_C_CharacterdNeedsAmmo) == 0x000001, "Wrong size on IPawnActions_C_CharacterdNeedsAmmo");
static_assert(offsetof(IPawnActions_C_CharacterdNeedsAmmo, bNeedsAmmo) == 0x000000, "Member 'IPawnActions_C_CharacterdNeedsAmmo::bNeedsAmmo' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.IsCharacterFullHP
// 0x0001 (0x0001 - 0x0000)
struct IPawnActions_C_IsCharacterFullHP final
{
public:
	bool                                          bIsFullHp;                                         // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IPawnActions_C_IsCharacterFullHP) == 0x000001, "Wrong alignment on IPawnActions_C_IsCharacterFullHP");
static_assert(sizeof(IPawnActions_C_IsCharacterFullHP) == 0x000001, "Wrong size on IPawnActions_C_IsCharacterFullHP");
static_assert(offsetof(IPawnActions_C_IsCharacterFullHP, bIsFullHp) == 0x000000, "Member 'IPawnActions_C_IsCharacterFullHP::bIsFullHp' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.OnWeaponInteract
// 0x0008 (0x0008 - 0x0000)
struct IPawnActions_C_OnWeaponInteract final
{
public:
	class ABP_BaseWeapon_C*                       NewWeapon;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IPawnActions_C_OnWeaponInteract) == 0x000008, "Wrong alignment on IPawnActions_C_OnWeaponInteract");
static_assert(sizeof(IPawnActions_C_OnWeaponInteract) == 0x000008, "Wrong size on IPawnActions_C_OnWeaponInteract");
static_assert(offsetof(IPawnActions_C_OnWeaponInteract, NewWeapon) == 0x000000, "Member 'IPawnActions_C_OnWeaponInteract::NewWeapon' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.OnPickupWeapon
// 0x0010 (0x0010 - 0x0000)
struct IPawnActions_C_OnPickupWeapon final
{
public:
	class UClass*                                 WeaponClass;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CurrentAmmo;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IPawnActions_C_OnPickupWeapon) == 0x000008, "Wrong alignment on IPawnActions_C_OnPickupWeapon");
static_assert(sizeof(IPawnActions_C_OnPickupWeapon) == 0x000010, "Wrong size on IPawnActions_C_OnPickupWeapon");
static_assert(offsetof(IPawnActions_C_OnPickupWeapon, WeaponClass) == 0x000000, "Member 'IPawnActions_C_OnPickupWeapon::WeaponClass' has a wrong offset!");
static_assert(offsetof(IPawnActions_C_OnPickupWeapon, CurrentAmmo) == 0x000008, "Member 'IPawnActions_C_OnPickupWeapon::CurrentAmmo' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.AddAmmo
// 0x0001 (0x0001 - 0x0000)
struct IPawnActions_C_AddAmmo final
{
public:
	EAmmoType                                     AmmoType;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IPawnActions_C_AddAmmo) == 0x000001, "Wrong alignment on IPawnActions_C_AddAmmo");
static_assert(sizeof(IPawnActions_C_AddAmmo) == 0x000001, "Wrong size on IPawnActions_C_AddAmmo");
static_assert(offsetof(IPawnActions_C_AddAmmo, AmmoType) == 0x000000, "Member 'IPawnActions_C_AddAmmo::AmmoType' has a wrong offset!");

// Function iPawnActions.iPawnActions_C.IsDead
// 0x0001 (0x0001 - 0x0000)
struct IPawnActions_C_IsDead final
{
public:
	bool                                          bIsDead;                                           // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IPawnActions_C_IsDead) == 0x000001, "Wrong alignment on IPawnActions_C_IsDead");
static_assert(sizeof(IPawnActions_C_IsDead) == 0x000001, "Wrong size on IPawnActions_C_IsDead");
static_assert(offsetof(IPawnActions_C_IsDead, bIsDead) == 0x000000, "Member 'IPawnActions_C_IsDead::bIsDead' has a wrong offset!");

}

