#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BasePlayerController

#include "Basic.hpp"

#include "BP_BasePlayerController_classes.hpp"
#include "BP_BasePlayerController_parameters.hpp"


namespace SDK
{

// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_AddToReadyToSpawnList
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Server_AddToReadyToSpawnList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_AddToReadyToSpawnList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_SetClass
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerClass                            PlayeerClass                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::Server_SetClass(EPlayerClass PlayeerClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_SetClass");

	Params::BP_BasePlayerController_C_Server_SetClass Parms{};

	Parms.PlayeerClass = PlayeerClass;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Kicked
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Kicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Kicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BasePlayerController_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_KillPawn
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Server_KillPawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_KillPawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_SetPerks
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPerks                                  Perk                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::Server_SetPerks(EPerks Perk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_SetPerks");

	Params::BP_BasePlayerController_C_Server_SetPerks Parms{};

	Parms.Perk = Perk;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_DestroyWeapon
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Actor                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::Server_DestroyWeapon(class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_DestroyWeapon");

	Params::BP_BasePlayerController_C_Server_DestroyWeapon Parms{};

	Parms.Actor = Actor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_SetSteamName
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Server_SetSteamName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_SetSteamName");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_SetPrimaryWeapon
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           PrimaryWeapon                                          (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::Server_SetPrimaryWeapon(const class UClass*& PrimaryWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_SetPrimaryWeapon");

	Params::BP_BasePlayerController_C_Server_SetPrimaryWeapon Parms{};

	Parms.PrimaryWeapon = PrimaryWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_SetSecondaryWeapon
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           SecondaryWeapon                                        (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::Server_SetSecondaryWeapon(const class UClass*& SecondaryWeapon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_SetSecondaryWeapon");

	Params::BP_BasePlayerController_C_Server_SetSecondaryWeapon Parms{};

	Parms.SecondaryWeapon = SecondaryWeapon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_SetUtilityType
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           UtilityType                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::Server_SetUtilityType(class UClass* UtilityType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_SetUtilityType");

	Params::BP_BasePlayerController_C_Server_SetUtilityType Parms{};

	Parms.UtilityType = UtilityType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.OnSuicide
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::OnSuicide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "OnSuicide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_InitScoreList
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Client_InitScoreList()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_InitScoreList");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.SetPerspective
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInTPP                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::SetPerspective(bool IsInTPP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "SetPerspective");

	Params::BP_BasePlayerController_C_SetPerspective Parms{};

	Parms.IsInTPP = IsInTPP;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_SetControlRotation
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRotator                         NewRotation                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::Client_SetControlRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_SetControlRotation");

	Params::BP_BasePlayerController_C_Client_SetControlRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.K2_OnReset
// (Event, Public, BlueprintEvent)

void ABP_BasePlayerController_C::K2_OnReset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "K2_OnReset");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.SetTeam
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NewTeam                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::SetTeam(int32 NewTeam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "SetTeam");

	Params::BP_BasePlayerController_C_SetTeam Parms{};

	Parms.NewTeam = NewTeam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.CheckTeamBalance
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::CheckTeamBalance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "CheckTeamBalance");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.ToggleTeamText
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::ToggleTeamText()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "ToggleTeamText");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.ExecuteUbergraph_BP_BasePlayerController
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::ExecuteUbergraph_BP_BasePlayerController(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "ExecuteUbergraph_BP_BasePlayerController");

	Params::BP_BasePlayerController_C_ExecuteUbergraph_BP_BasePlayerController Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.IsAnyMenuOpen
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bTrue                                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::IsAnyMenuOpen(bool* bTrue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "IsAnyMenuOpen");

	Params::BP_BasePlayerController_C_IsAnyMenuOpen Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bTrue != nullptr)
		*bTrue = Parms.bTrue;
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.SetNoCooldownAbilities
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bNoAbilityCooldown                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::SetNoCooldownAbilities(bool bNoAbilityCooldown)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "SetNoCooldownAbilities");

	Params::BP_BasePlayerController_C_SetNoCooldownAbilities Parms{};

	Parms.bNoAbilityCooldown = bNoAbilityCooldown;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.SetInfiniteExplosives
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInfiniteExplosives_0                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::SetInfiniteExplosives(bool bInfiniteExplosives_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "SetInfiniteExplosives");

	Params::BP_BasePlayerController_C_SetInfiniteExplosives Parms{};

	Parms.bInfiniteExplosives_0 = bInfiniteExplosives_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.SetInfiniteClip
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bInfiniteClip_0                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::SetInfiniteClip(bool bInfiniteClip_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "SetInfiniteClip");

	Params::BP_BasePlayerController_C_SetInfiniteClip Parms{};

	Parms.bInfiniteClip_0 = bInfiniteClip_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.GetPlayerName
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayerName                                             (Parm, OutParm)

void ABP_BasePlayerController_C::GetPlayerName(class FText* PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "GetPlayerName");

	Params::BP_BasePlayerController_C_GetPlayerName Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (PlayerName != nullptr)
		*PlayerName = std::move(Parms.PlayerName);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.LoadSettings
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::LoadSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "LoadSettings");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_Alt_Two_K2Node_InputKeyEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_Alt_Two_K2Node_InputKeyEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_Alt_Two_K2Node_InputKeyEvent_3");

	Params::BP_BasePlayerController_C_InpActEvt_Alt_Two_K2Node_InputKeyEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_Alt_Four_K2Node_InputKeyEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_Alt_Four_K2Node_InputKeyEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_Alt_Four_K2Node_InputKeyEvent_2");

	Params::BP_BasePlayerController_C_InpActEvt_Alt_Four_K2Node_InputKeyEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_Alt_Three_K2Node_InputKeyEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_Alt_Three_K2Node_InputKeyEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_Alt_Three_K2Node_InputKeyEvent_1");

	Params::BP_BasePlayerController_C_InpActEvt_Alt_Three_K2Node_InputKeyEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_Alt_One_K2Node_InputKeyEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_Alt_One_K2Node_InputKeyEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_Alt_One_K2Node_InputKeyEvent_0");

	Params::BP_BasePlayerController_C_InpActEvt_Alt_One_K2Node_InputKeyEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_SettingMenu_K2Node_InputActionEvent_5
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_SettingMenu_K2Node_InputActionEvent_5(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_SettingMenu_K2Node_InputActionEvent_5");

	Params::BP_BasePlayerController_C_InpActEvt_SettingMenu_K2Node_InputActionEvent_5 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_4
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_4(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_4");

	Params::BP_BasePlayerController_C_InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_4 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_3
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_3(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_3");

	Params::BP_BasePlayerController_C_InpActEvt_ShowScoreScreen_K2Node_InputActionEvent_3 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_GlobalChat_K2Node_InputActionEvent_2
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_GlobalChat_K2Node_InputActionEvent_2(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_GlobalChat_K2Node_InputActionEvent_2");

	Params::BP_BasePlayerController_C_InpActEvt_GlobalChat_K2Node_InputActionEvent_2 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_TeamChat_K2Node_InputActionEvent_1
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_TeamChat_K2Node_InputActionEvent_1(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_TeamChat_K2Node_InputActionEvent_1");

	Params::BP_BasePlayerController_C_InpActEvt_TeamChat_K2Node_InputActionEvent_1 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.InpActEvt_Chat_K2Node_InputActionEvent_0
// (BlueprintEvent)
// Parameters:
// struct FKey                             Key                                                    (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)

void ABP_BasePlayerController_C::InpActEvt_Chat_K2Node_InputActionEvent_0(const struct FKey& Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "InpActEvt_Chat_K2Node_InputActionEvent_0");

	Params::BP_BasePlayerController_C_InpActEvt_Chat_K2Node_InputActionEvent_0 Parms{};

	Parms.Key = std::move(Key);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.OnFailure_8B36B7024B2396B3739819A2F6B7B374
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::OnFailure_8B36B7024B2396B3739819A2F6B7B374()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "OnFailure_8B36B7024B2396B3739819A2F6B7B374");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.OnSuccess_8B36B7024B2396B3739819A2F6B7B374
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::OnSuccess_8B36B7024B2396B3739819A2F6B7B374()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "OnSuccess_8B36B7024B2396B3739819A2F6B7B374");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Create_HUD
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Create_HUD()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Create_HUD");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.CloseScores
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::CloseScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "CloseScores");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.OpenScores
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::OpenScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "OpenScores");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.ShowKilledByWidget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             KillerName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   KillerHealth                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerClass                            KillerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::ShowKilledByWidget(const class FText& KillerName, float KillerHealth, EPlayerClass KillerClass, const class UDamageType* DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "ShowKilledByWidget");

	Params::BP_BasePlayerController_C_ShowKilledByWidget Parms{};

	Parms.KillerName = std::move(KillerName);
	Parms.KillerHealth = KillerHealth;
	Parms.KillerClass = KillerClass;
	Parms.DamageType = DamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.CleanWidgets
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::CleanWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "CleanWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.CloseControlsWidget
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::CloseControlsWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "CloseControlsWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_CloseCharacterSelection
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Client_CloseCharacterSelection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_CloseCharacterSelection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_RemoveAllWidgets
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Client_RemoveAllWidgets()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_RemoveAllWidgets");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_ShowCharacterSelectionWidget
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Instant                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::Client_ShowCharacterSelectionWidget(bool Instant)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_ShowCharacterSelectionWidget");

	Params::BP_BasePlayerController_C_Client_ShowCharacterSelectionWidget Parms{};

	Parms.Instant = Instant;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_CreateChatWidget
// (Net, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Client_CreateChatWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_CreateChatWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_ShowKillingSpreeMessage
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Client_ShowKillingSpreeMessage()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_ShowKillingSpreeMessage");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_UpdateKillFeed
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerState*                     Kill                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Victi                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APlayerState*                     Assist                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bHeadshot                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::Client_UpdateKillFeed(class APlayerState* Kill, class APlayerState* Victi, const class UDamageType* DamageType, class APlayerState* Assist, bool bHeadshot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_UpdateKillFeed");

	Params::BP_BasePlayerController_C_Client_UpdateKillFeed Parms{};

	Parms.Kill = Kill;
	Parms.Victi = Victi;
	Parms.DamageType = DamageType;
	Parms.Assist = Assist;
	Parms.bHeadshot = bHeadshot;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.ShowPlayerScores
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::ShowPlayerScores()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "ShowPlayerScores");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.ShowSettingsMenu
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    InGame                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::ShowSettingsMenu(bool InGame)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "ShowSettingsMenu");

	Params::BP_BasePlayerController_C_ShowSettingsMenu Parms{};

	Parms.InGame = InGame;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.CreateKilledByWidget
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             KillerName                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// float                                   KillerHealth                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EPlayerClass                            KillerClass                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UDamageType*                      DamageType                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::CreateKilledByWidget(const class FText& KillerName, float KillerHealth, EPlayerClass KillerClass, const class UDamageType* DamageType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "CreateKilledByWidget");

	Params::BP_BasePlayerController_C_CreateKilledByWidget Parms{};

	Parms.KillerName = std::move(KillerName);
	Parms.KillerHealth = KillerHealth;
	Parms.KillerClass = KillerClass;
	Parms.DamageType = DamageType;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_ShowEndGameMenu
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::Client_ShowEndGameMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_ShowEndGameMenu");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.ChangeVolume
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   AudioVolume                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class USoundClass*                      Sound_Class                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::ChangeVolume(float AudioVolume, class USoundClass* Sound_Class)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "ChangeVolume");

	Params::BP_BasePlayerController_C_ChangeVolume Parms{};

	Parms.AudioVolume = AudioVolume;
	Parms.Sound_Class = Sound_Class;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.CreateGameStateWidget
// (BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::CreateGameStateWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "CreateGameStateWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_AddWidgetByClass
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::Client_AddWidgetByClass(class UClass* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_AddWidgetByClass");

	Params::BP_BasePlayerController_C_Client_AddWidgetByClass Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.AutoBalanceOnDeath
// (Net, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BasePlayerController_C::AutoBalanceOnDeath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "AutoBalanceOnDeath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Client_UpdateChat
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Sender                                                 (BlueprintVisible, BlueprintReadOnly, Parm)
// class FText                             Text                                                   (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    bTeamChat                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::Client_UpdateChat(const class FText& Sender, const class FText& Text, bool bTeamChat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Client_UpdateChat");

	Params::BP_BasePlayerController_C_Client_UpdateChat Parms{};

	Parms.Sender = std::move(Sender);
	Parms.Text = std::move(Text);
	Parms.bTeamChat = bTeamChat;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.Server_GetChatMessage
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             TextToSend                                             (BlueprintVisible, BlueprintReadOnly, Parm)
// bool                                    bTeamChat                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class APlayerController*                SenderPC                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::Server_GetChatMessage(const class FText& TextToSend, bool bTeamChat, class APlayerController* SenderPC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "Server_GetChatMessage");

	Params::BP_BasePlayerController_C_Server_GetChatMessage Parms{};

	Parms.TextToSend = std::move(TextToSend);
	Parms.bTeamChat = bTeamChat;
	Parms.SenderPC = SenderPC;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.SendServerMessage
// (Net, NetReliable, NetClient, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Message                                                (BlueprintVisible, BlueprintReadOnly, Parm)

void ABP_BasePlayerController_C::SendServerMessage(const class FText& Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "SendServerMessage");

	Params::BP_BasePlayerController_C_SendServerMessage Parms{};

	Parms.Message = std::move(Message);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.ReceiveEndPlay
// (Event, Protected, BlueprintEvent)
// Parameters:
// EEndPlayReason                          EndPlayReason                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BasePlayerController_C::ReceiveEndPlay(EEndPlayReason EndPlayReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "ReceiveEndPlay");

	Params::BP_BasePlayerController_C_ReceiveEndPlay Parms{};

	Parms.EndPlayReason = EndPlayReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.HasNoAbilityCooldown
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bNoAbilityCooldown                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::HasNoAbilityCooldown(bool* bNoAbilityCooldown) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "HasNoAbilityCooldown");

	Params::BP_BasePlayerController_C_HasNoAbilityCooldown Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bNoAbilityCooldown != nullptr)
		*bNoAbilityCooldown = Parms.bNoAbilityCooldown;
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.HasInfiniteExplosives
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bInfiniteExplosives_0                                  (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::HasInfiniteExplosives(bool* bInfiniteExplosives_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "HasInfiniteExplosives");

	Params::BP_BasePlayerController_C_HasInfiniteExplosives Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bInfiniteExplosives_0 != nullptr)
		*bInfiniteExplosives_0 = Parms.bInfiniteExplosives_0;
}


// Function BP_BasePlayerController.BP_BasePlayerController_C.HasInfiniteClip
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    bInfiniteClip_0                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BasePlayerController_C::HasInfiniteClip(bool* bInfiniteClip_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BasePlayerController_C", "HasInfiniteClip");

	Params::BP_BasePlayerController_C_HasInfiniteClip Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (bInfiniteClip_0 != nullptr)
		*bInfiniteClip_0 = Parms.bInfiniteClip_0;
}

}

