#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Bullet

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Bullet.BP_Bullet_C
// 0x0058 (0x0278 - 0x0220)
class ABP_Bullet_C final : public AActor
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0220(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0228(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, IsPlainOldData, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Velocity;                                          // 0x0230(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	struct FVector                                StartLocation;                                     // 0x023C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Damage;                                            // 0x0248(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 DmgType;                                           // 0x0250(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         ActorsHitted;                                      // 0x0258(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	class ABP_BaseWeapon_C*                       WeaponRef;                                         // 0x0268(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         ZVelocity;                                         // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bClientSideOnly;                                   // 0x0274(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn)

public:
	void MoveBullet(const struct FVector& NewLocation, bool bBlockingHit);
	void HandleHit(const struct FHitResult& Hit);
	void BulletApplyDamage(class ABP_BaseCharacter_C* Instigator_0, class UClass* DamageType, const struct FHitResult& Hit);
	void ReceiveBeginPlay();
	void ReceiveTick(float DeltaSeconds);
	void Server_ApplyPointDamageServer(class ABP_BaseCharacter_C* Instigator_0, class UClass* DamageType, const struct FHitResult& Hit);
	void SVR_CheckFriendlyFire();
	void ExecuteUbergraph_BP_Bullet(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Bullet_C">();
	}
	static class ABP_Bullet_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Bullet_C>();
	}
};
static_assert(alignof(ABP_Bullet_C) == 0x000008, "Wrong alignment on ABP_Bullet_C");
static_assert(sizeof(ABP_Bullet_C) == 0x000278, "Wrong size on ABP_Bullet_C");
static_assert(offsetof(ABP_Bullet_C, UberGraphFrame) == 0x000220, "Member 'ABP_Bullet_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, DefaultSceneRoot) == 0x000228, "Member 'ABP_Bullet_C::DefaultSceneRoot' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, Velocity) == 0x000230, "Member 'ABP_Bullet_C::Velocity' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, StartLocation) == 0x00023C, "Member 'ABP_Bullet_C::StartLocation' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, Damage) == 0x000248, "Member 'ABP_Bullet_C::Damage' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, DmgType) == 0x000250, "Member 'ABP_Bullet_C::DmgType' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, ActorsHitted) == 0x000258, "Member 'ABP_Bullet_C::ActorsHitted' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, WeaponRef) == 0x000268, "Member 'ABP_Bullet_C::WeaponRef' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, ZVelocity) == 0x000270, "Member 'ABP_Bullet_C::ZVelocity' has a wrong offset!");
static_assert(offsetof(ABP_Bullet_C, bClientSideOnly) == 0x000274, "Member 'ABP_Bullet_C::bClientSideOnly' has a wrong offset!");

}

