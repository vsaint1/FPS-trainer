#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: IUI

#include "Basic.hpp"

#include "EFiringMode_structs.hpp"


namespace SDK::Params
{

// Function iUI.iUI_C.ShowAbilityCooldownTime
// 0x0004 (0x0004 - 0x0000)
struct IUI_C_ShowAbilityCooldownTime final
{
public:
	float                                         TimeRemaining;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_ShowAbilityCooldownTime) == 0x000004, "Wrong alignment on IUI_C_ShowAbilityCooldownTime");
static_assert(sizeof(IUI_C_ShowAbilityCooldownTime) == 0x000004, "Wrong size on IUI_C_ShowAbilityCooldownTime");
static_assert(offsetof(IUI_C_ShowAbilityCooldownTime, TimeRemaining) == 0x000000, "Member 'IUI_C_ShowAbilityCooldownTime::TimeRemaining' has a wrong offset!");

// Function iUI.iUI_C.ShowInteractInfo
// 0x0018 (0x0018 - 0x0000)
struct IUI_C_ShowInteractInfo final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(IUI_C_ShowInteractInfo) == 0x000008, "Wrong alignment on IUI_C_ShowInteractInfo");
static_assert(sizeof(IUI_C_ShowInteractInfo) == 0x000018, "Wrong size on IUI_C_ShowInteractInfo");
static_assert(offsetof(IUI_C_ShowInteractInfo, Description) == 0x000000, "Member 'IUI_C_ShowInteractInfo::Description' has a wrong offset!");

// Function iUI.iUI_C.ShowInteractProgressBar
// 0x0004 (0x0004 - 0x0000)
struct IUI_C_ShowInteractProgressBar final
{
public:
	float                                         InteractTime;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_ShowInteractProgressBar) == 0x000004, "Wrong alignment on IUI_C_ShowInteractProgressBar");
static_assert(sizeof(IUI_C_ShowInteractProgressBar) == 0x000004, "Wrong size on IUI_C_ShowInteractProgressBar");
static_assert(offsetof(IUI_C_ShowInteractProgressBar, InteractTime) == 0x000000, "Member 'IUI_C_ShowInteractProgressBar::InteractTime' has a wrong offset!");

// Function iUI.iUI_C.UpdateObjectiveMarkers
// 0x0010 (0x0010 - 0x0000)
struct IUI_C_UpdateObjectiveMarkers final
{
public:
	class ABP_Base_Objective_C*                   ObjectiveToUpdate;                                 // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          PlayIconAnim;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Team;                                              // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateObjectiveMarkers) == 0x000008, "Wrong alignment on IUI_C_UpdateObjectiveMarkers");
static_assert(sizeof(IUI_C_UpdateObjectiveMarkers) == 0x000010, "Wrong size on IUI_C_UpdateObjectiveMarkers");
static_assert(offsetof(IUI_C_UpdateObjectiveMarkers, ObjectiveToUpdate) == 0x000000, "Member 'IUI_C_UpdateObjectiveMarkers::ObjectiveToUpdate' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateObjectiveMarkers, PlayIconAnim) == 0x000008, "Member 'IUI_C_UpdateObjectiveMarkers::PlayIconAnim' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateObjectiveMarkers, Team) == 0x00000C, "Member 'IUI_C_UpdateObjectiveMarkers::Team' has a wrong offset!");

// Function iUI.iUI_C.ShowScore
// 0x0020 (0x0020 - 0x0000)
struct IUI_C_ShowScore final
{
public:
	float                                         Score;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Reason;                                            // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(IUI_C_ShowScore) == 0x000008, "Wrong alignment on IUI_C_ShowScore");
static_assert(sizeof(IUI_C_ShowScore) == 0x000020, "Wrong size on IUI_C_ShowScore");
static_assert(offsetof(IUI_C_ShowScore, Score) == 0x000000, "Member 'IUI_C_ShowScore::Score' has a wrong offset!");
static_assert(offsetof(IUI_C_ShowScore, Reason) == 0x000008, "Member 'IUI_C_ShowScore::Reason' has a wrong offset!");

// Function iUI.iUI_C.UpdateKillFeed
// 0x0028 (0x0028 - 0x0000)
struct IUI_C_UpdateKillFeed final
{
public:
	class APlayerState*                           Killer;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           Victim;                                            // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	const class UDamageType*                      DamageType;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class APlayerState*                           Assist;                                            // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bHeadshot;                                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IUI_C_UpdateKillFeed) == 0x000008, "Wrong alignment on IUI_C_UpdateKillFeed");
static_assert(sizeof(IUI_C_UpdateKillFeed) == 0x000028, "Wrong size on IUI_C_UpdateKillFeed");
static_assert(offsetof(IUI_C_UpdateKillFeed, Killer) == 0x000000, "Member 'IUI_C_UpdateKillFeed::Killer' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateKillFeed, Victim) == 0x000008, "Member 'IUI_C_UpdateKillFeed::Victim' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateKillFeed, DamageType) == 0x000010, "Member 'IUI_C_UpdateKillFeed::DamageType' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateKillFeed, Assist) == 0x000018, "Member 'IUI_C_UpdateKillFeed::Assist' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateKillFeed, bHeadshot) == 0x000020, "Member 'IUI_C_UpdateKillFeed::bHeadshot' has a wrong offset!");

// Function iUI.iUI_C.UpdateGameModeScores
// 0x000C (0x000C - 0x0000)
struct IUI_C_UpdateGameModeScores final
{
public:
	int32                                         TeamAPoints;                                       // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TeamBPoints;                                       // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         PointsToWin;                                       // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateGameModeScores) == 0x000004, "Wrong alignment on IUI_C_UpdateGameModeScores");
static_assert(sizeof(IUI_C_UpdateGameModeScores) == 0x00000C, "Wrong size on IUI_C_UpdateGameModeScores");
static_assert(offsetof(IUI_C_UpdateGameModeScores, TeamAPoints) == 0x000000, "Member 'IUI_C_UpdateGameModeScores::TeamAPoints' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateGameModeScores, TeamBPoints) == 0x000004, "Member 'IUI_C_UpdateGameModeScores::TeamBPoints' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateGameModeScores, PointsToWin) == 0x000008, "Member 'IUI_C_UpdateGameModeScores::PointsToWin' has a wrong offset!");

// Function iUI.iUI_C.UpdateMatchTimer
// 0x0004 (0x0004 - 0x0000)
struct IUI_C_UpdateMatchTimer final
{
public:
	float                                         TimeInSeconds;                                     // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateMatchTimer) == 0x000004, "Wrong alignment on IUI_C_UpdateMatchTimer");
static_assert(sizeof(IUI_C_UpdateMatchTimer) == 0x000004, "Wrong size on IUI_C_UpdateMatchTimer");
static_assert(offsetof(IUI_C_UpdateMatchTimer, TimeInSeconds) == 0x000000, "Member 'IUI_C_UpdateMatchTimer::TimeInSeconds' has a wrong offset!");

// Function iUI.iUI_C.UpdateTotalBullets
// 0x0004 (0x0004 - 0x0000)
struct IUI_C_UpdateTotalBullets final
{
public:
	int32                                         TotalBullets;                                      // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateTotalBullets) == 0x000004, "Wrong alignment on IUI_C_UpdateTotalBullets");
static_assert(sizeof(IUI_C_UpdateTotalBullets) == 0x000004, "Wrong size on IUI_C_UpdateTotalBullets");
static_assert(offsetof(IUI_C_UpdateTotalBullets, TotalBullets) == 0x000000, "Member 'IUI_C_UpdateTotalBullets::TotalBullets' has a wrong offset!");

// Function iUI.iUI_C.UpdateCurrentBullets
// 0x0008 (0x0008 - 0x0000)
struct IUI_C_UpdateCurrentBullets final
{
public:
	int32                                         CurrentBullets;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         BulletsPerMag;                                     // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateCurrentBullets) == 0x000004, "Wrong alignment on IUI_C_UpdateCurrentBullets");
static_assert(sizeof(IUI_C_UpdateCurrentBullets) == 0x000008, "Wrong size on IUI_C_UpdateCurrentBullets");
static_assert(offsetof(IUI_C_UpdateCurrentBullets, CurrentBullets) == 0x000000, "Member 'IUI_C_UpdateCurrentBullets::CurrentBullets' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateCurrentBullets, BulletsPerMag) == 0x000004, "Member 'IUI_C_UpdateCurrentBullets::BulletsPerMag' has a wrong offset!");

// Function iUI.iUI_C.UpdateHP
// 0x0008 (0x0008 - 0x0000)
struct IUI_C_UpdateHP final
{
public:
	float                                         NewHP;                                             // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         MaxHP;                                             // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateHP) == 0x000004, "Wrong alignment on IUI_C_UpdateHP");
static_assert(sizeof(IUI_C_UpdateHP) == 0x000008, "Wrong size on IUI_C_UpdateHP");
static_assert(offsetof(IUI_C_UpdateHP, NewHP) == 0x000000, "Member 'IUI_C_UpdateHP::NewHP' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateHP, MaxHP) == 0x000004, "Member 'IUI_C_UpdateHP::MaxHP' has a wrong offset!");

// Function iUI.iUI_C.UpdateFiringMode
// 0x0001 (0x0001 - 0x0000)
struct IUI_C_UpdateFiringMode final
{
public:
	EFiringMode                                   NewFiringMode;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateFiringMode) == 0x000001, "Wrong alignment on IUI_C_UpdateFiringMode");
static_assert(sizeof(IUI_C_UpdateFiringMode) == 0x000001, "Wrong size on IUI_C_UpdateFiringMode");
static_assert(offsetof(IUI_C_UpdateFiringMode, NewFiringMode) == 0x000000, "Member 'IUI_C_UpdateFiringMode::NewFiringMode' has a wrong offset!");

// Function iUI.iUI_C.ShowHitMarker
// 0x0001 (0x0001 - 0x0000)
struct IUI_C_ShowHitMarker final
{
public:
	bool                                          bVehicle;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
};
static_assert(alignof(IUI_C_ShowHitMarker) == 0x000001, "Wrong alignment on IUI_C_ShowHitMarker");
static_assert(sizeof(IUI_C_ShowHitMarker) == 0x000001, "Wrong size on IUI_C_ShowHitMarker");
static_assert(offsetof(IUI_C_ShowHitMarker, bVehicle) == 0x000000, "Member 'IUI_C_ShowHitMarker::bVehicle' has a wrong offset!");

// Function iUI.iUI_C.UpdateSkillIcon
// 0x0008 (0x0008 - 0x0000)
struct IUI_C_UpdateSkillIcon final
{
public:
	class UTexture2D*                             SkillIcon;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateSkillIcon) == 0x000008, "Wrong alignment on IUI_C_UpdateSkillIcon");
static_assert(sizeof(IUI_C_UpdateSkillIcon) == 0x000008, "Wrong size on IUI_C_UpdateSkillIcon");
static_assert(offsetof(IUI_C_UpdateSkillIcon, SkillIcon) == 0x000000, "Member 'IUI_C_UpdateSkillIcon::SkillIcon' has a wrong offset!");

// Function iUI.iUI_C.UpdateTeamIcon
// 0x0008 (0x0008 - 0x0000)
struct IUI_C_UpdateTeamIcon final
{
public:
	class UTexture*                               TeamIcon;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateTeamIcon) == 0x000008, "Wrong alignment on IUI_C_UpdateTeamIcon");
static_assert(sizeof(IUI_C_UpdateTeamIcon) == 0x000008, "Wrong size on IUI_C_UpdateTeamIcon");
static_assert(offsetof(IUI_C_UpdateTeamIcon, TeamIcon) == 0x000000, "Member 'IUI_C_UpdateTeamIcon::TeamIcon' has a wrong offset!");

// Function iUI.iUI_C.UpdateDeathmatchScores
// 0x0018 (0x0018 - 0x0000)
struct IUI_C_UpdateDeathmatchScores final
{
public:
	class FString                                 WinnerName;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	int32                                         WinnerKills;                                       // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         KillsToWin;                                        // 0x0014(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateDeathmatchScores) == 0x000008, "Wrong alignment on IUI_C_UpdateDeathmatchScores");
static_assert(sizeof(IUI_C_UpdateDeathmatchScores) == 0x000018, "Wrong size on IUI_C_UpdateDeathmatchScores");
static_assert(offsetof(IUI_C_UpdateDeathmatchScores, WinnerName) == 0x000000, "Member 'IUI_C_UpdateDeathmatchScores::WinnerName' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateDeathmatchScores, WinnerKills) == 0x000010, "Member 'IUI_C_UpdateDeathmatchScores::WinnerKills' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateDeathmatchScores, KillsToWin) == 0x000014, "Member 'IUI_C_UpdateDeathmatchScores::KillsToWin' has a wrong offset!");

// Function iUI.iUI_C.UpdateRushScores
// 0x0008 (0x0008 - 0x0000)
struct IUI_C_UpdateRushScores final
{
public:
	int32                                         Reinforcements;                                    // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         TotalReinforcements;                               // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateRushScores) == 0x000004, "Wrong alignment on IUI_C_UpdateRushScores");
static_assert(sizeof(IUI_C_UpdateRushScores) == 0x000008, "Wrong size on IUI_C_UpdateRushScores");
static_assert(offsetof(IUI_C_UpdateRushScores, Reinforcements) == 0x000000, "Member 'IUI_C_UpdateRushScores::Reinforcements' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateRushScores, TotalReinforcements) == 0x000004, "Member 'IUI_C_UpdateRushScores::TotalReinforcements' has a wrong offset!");

// Function iUI.iUI_C.UpdateExplosives
// 0x0010 (0x0010 - 0x0000)
struct IUI_C_UpdateExplosives final
{
public:
	int32                                         ExplosivesAmount;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               Icon;                                              // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(IUI_C_UpdateExplosives) == 0x000008, "Wrong alignment on IUI_C_UpdateExplosives");
static_assert(sizeof(IUI_C_UpdateExplosives) == 0x000010, "Wrong size on IUI_C_UpdateExplosives");
static_assert(offsetof(IUI_C_UpdateExplosives, ExplosivesAmount) == 0x000000, "Member 'IUI_C_UpdateExplosives::ExplosivesAmount' has a wrong offset!");
static_assert(offsetof(IUI_C_UpdateExplosives, Icon) == 0x000008, "Member 'IUI_C_UpdateExplosives::Icon' has a wrong offset!");

}

