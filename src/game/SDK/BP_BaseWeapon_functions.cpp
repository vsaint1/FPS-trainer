#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseWeapon

#include "Basic.hpp"

#include "BP_BaseWeapon_classes.hpp"
#include "BP_BaseWeapon_parameters.hpp"


namespace SDK
{

// Function BP_BaseWeapon.BP_BaseWeapon_C.OnInstantBulletHit
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   DmgMultiplier                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::OnInstantBulletHit(const struct FHitResult& Hit, float DmgMultiplier, class APawn* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "OnInstantBulletHit");

	Params::BP_BaseWeapon_C_OnInstantBulletHit Parms{};

	Parms.Hit = std::move(Hit);
	Parms.DmgMultiplier = DmgMultiplier;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.GetSpawnBulletInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SpawnLocation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Velocity                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         SpawnRotation                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BaseWeapon_C::GetSpawnBulletInfo(struct FVector* SpawnLocation, struct FVector* Velocity, struct FRotator* SpawnRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "GetSpawnBulletInfo");

	Params::BP_BaseWeapon_C_GetSpawnBulletInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (SpawnLocation != nullptr)
		*SpawnLocation = std::move(Parms.SpawnLocation);

	if (Velocity != nullptr)
		*Velocity = std::move(Parms.Velocity);

	if (SpawnRotation != nullptr)
		*SpawnRotation = std::move(Parms.SpawnRotation);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.GetLineTraceInfo
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TraceStart                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TraceEnd                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::GetLineTraceInfo(struct FVector* TraceStart, struct FVector* TraceEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "GetLineTraceInfo");

	Params::BP_BaseWeapon_C_GetLineTraceInfo Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (TraceStart != nullptr)
		*TraceStart = std::move(Parms.TraceStart);

	if (TraceEnd != nullptr)
		*TraceEnd = std::move(Parms.TraceEnd);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.FireInstant
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TraceStart                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForwardVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Spread                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::FireInstant(const struct FVector& TraceStart, const struct FVector& ForwardVector, class APawn* Instigator_0, float Spread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "FireInstant");

	Params::BP_BaseWeapon_C_FireInstant Parms{};

	Parms.TraceStart = std::move(TraceStart);
	Parms.ForwardVector = std::move(ForwardVector);
	Parms.Instigator_0 = Instigator_0;
	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.CheckBulletPath
// (Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BaseWeapon_C::CheckBulletPath(bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "CheckBulletPath");

	Params::BP_BaseWeapon_C_CheckBulletPath Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.SpawnBullet
// (Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SpawnLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BulletVelocity_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         SpawnRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Spread                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bClientSideOnly                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BaseWeapon_C::SpawnBullet(const struct FVector& SpawnLocation, const struct FVector& BulletVelocity_0, class APawn* Instigator_0, const struct FRotator& SpawnRotation, float Spread, bool bClientSideOnly)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "SpawnBullet");

	Params::BP_BaseWeapon_C_SpawnBullet Parms{};

	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.BulletVelocity_0 = std::move(BulletVelocity_0);
	Parms.Instigator_0 = Instigator_0;
	Parms.SpawnRotation = std::move(SpawnRotation);
	Parms.Spread = Spread;
	Parms.bClientSideOnly = bClientSideOnly;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.ReduceAmmo
// (Public, BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::ReduceAmmo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "ReduceAmmo");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Server_FireBullet
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          SpawnLocation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          BulletVelocity_0                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         SpawnRotation                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// float                                   Spread                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::Server_FireBullet(const struct FVector& SpawnLocation, const struct FVector& BulletVelocity_0, class APawn* Instigator_0, const struct FRotator& SpawnRotation, float Spread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Server_FireBullet");

	Params::BP_BaseWeapon_C_Server_FireBullet Parms{};

	Parms.SpawnLocation = std::move(SpawnLocation);
	Parms.BulletVelocity_0 = std::move(BulletVelocity_0);
	Parms.Instigator_0 = Instigator_0;
	Parms.SpawnRotation = std::move(SpawnRotation);
	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Server_FireInstantBullet
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector                          TraceStart                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ForwardVector                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   Spread                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::Server_FireInstantBullet(const struct FVector& TraceStart, const struct FVector& ForwardVector, class APawn* Instigator_0, float Spread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Server_FireInstantBullet");

	Params::BP_BaseWeapon_C_Server_FireInstantBullet Parms{};

	Parms.TraceStart = std::move(TraceStart);
	Parms.ForwardVector = std::move(ForwardVector);
	Parms.Instigator_0 = Instigator_0;
	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Server_InstantBulletHit
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
// float                                   DmgMultiplier                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class APawn*                            Instigator_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::Server_InstantBulletHit(const struct FHitResult& Hit, float DmgMultiplier, class APawn* Instigator_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Server_InstantBulletHit");

	Params::BP_BaseWeapon_C_Server_InstantBulletHit Parms{};

	Parms.Hit = std::move(Hit);
	Parms.DmgMultiplier = DmgMultiplier;
	Parms.Instigator_0 = Instigator_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Shoot
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Spread                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::Shoot(float Spread)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Shoot");

	Params::BP_BaseWeapon_C_Shoot Parms{};

	Parms.Spread = Spread;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Multicast_PlayShotEffects
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::Multicast_PlayShotEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Multicast_PlayShotEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.LocalPlayEffects
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::LocalPlayEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "LocalPlayEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Multicast_PlayImpacEffects
// (Net, NetMulticast, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BaseWeapon_C::Multicast_PlayImpacEffects(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Multicast_PlayImpacEffects");

	Params::BP_BaseWeapon_C_Multicast_PlayImpacEffects Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Server_PlayImpactEffects
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       HitResult                                              (BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BaseWeapon_C::Server_PlayImpactEffects(const struct FHitResult& HitResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Server_PlayImpactEffects");

	Params::BP_BaseWeapon_C_Server_PlayImpactEffects Parms{};

	Parms.HitResult = std::move(HitResult);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Server_PlayShotEffects
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::Server_PlayShotEffects()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Server_PlayShotEffects");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Multicast_PlayMultipleImpactEffects
// (Net, NetMulticast, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHitResult>               HitResults                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ABP_BaseWeapon_C::Multicast_PlayMultipleImpactEffects(const TArray<struct FHitResult>& HitResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Multicast_PlayMultipleImpactEffects");

	Params::BP_BaseWeapon_C_Multicast_PlayMultipleImpactEffects Parms{};

	Parms.HitResults = std::move(HitResults);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Server_PlayHitImpactEffect
// (Net, NetReliable, NetServer, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FHitResult>               HitResults                                             (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void ABP_BaseWeapon_C::Server_PlayHitImpactEffect(const TArray<struct FHitResult>& HitResults)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Server_PlayHitImpactEffect");

	Params::BP_BaseWeapon_C_Server_PlayHitImpactEffect Parms{};

	Parms.HitResults = std::move(HitResults);

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.PlayShotShake
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::PlayShotShake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "PlayShotShake");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.PlayWeaponFireSound
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::PlayWeaponFireSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "PlayWeaponFireSound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.PlayWeaponShotAnimation
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::PlayWeaponShotAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "PlayWeaponShotAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.ReceiveBeginPlay
// (Event, Protected, BlueprintEvent)

void ABP_BaseWeapon_C::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "ReceiveBeginPlay");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.ReloadWeapon
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   AddedAmmo                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::ReloadWeapon(int32 AddedAmmo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "ReloadWeapon");

	Params::BP_BaseWeapon_C_ReloadWeapon Parms{};

	Parms.AddedAmmo = AddedAmmo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.ChangeFiringMode
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::ChangeFiringMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "ChangeFiringMode");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.HoldBreath
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::HoldBreath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "HoldBreath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.StopHoldBreath
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::StopHoldBreath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "StopHoldBreath");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.ScopeZoom
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Up                                                     (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BaseWeapon_C::ScopeZoom(bool Up)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "ScopeZoom");

	Params::BP_BaseWeapon_C_ScopeZoom Parms{};

	Parms.Up = Up;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.UpdateWeaponVisibility
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    bThirdPerson                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)

void ABP_BaseWeapon_C::UpdateWeaponVisibility(bool bThirdPerson)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "UpdateWeaponVisibility");

	Params::BP_BaseWeapon_C_UpdateWeaponVisibility Parms{};

	Parms.bThirdPerson = bThirdPerson;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.SetFiringMode
// (BlueprintCallable, BlueprintEvent)
// Parameters:
// EFiringMode                             NewParam                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::SetFiringMode(EFiringMode NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "SetFiringMode");

	Params::BP_BaseWeapon_C_SetFiringMode Parms{};

	Parms.NewParam = NewParam;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.OnBeginAiming
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::OnBeginAiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "OnBeginAiming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.OnStopAiming
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::OnStopAiming()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "OnStopAiming");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.Server_SetActualAmmo
// (Net, NetReliable, NetServer, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   ActualAmmo_0                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::Server_SetActualAmmo(int32 ActualAmmo_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "Server_SetActualAmmo");

	Params::BP_BaseWeapon_C_Server_SetActualAmmo Parms{};

	Parms.ActualAmmo_0 = ActualAmmo_0;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.ADS
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::ADS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "ADS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.StopADS
// (BlueprintCallable, BlueprintEvent)

void ABP_BaseWeapon_C::StopADS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "StopADS");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.ExecuteUbergraph_BP_BaseWeapon
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ABP_BaseWeapon_C::ExecuteUbergraph_BP_BaseWeapon(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "ExecuteUbergraph_BP_BaseWeapon");

	Params::BP_BaseWeapon_C_ExecuteUbergraph_BP_BaseWeapon Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_BaseWeapon.BP_BaseWeapon_C.PlayEffects
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHitResult                       Hit                                                    (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)

void ABP_BaseWeapon_C::PlayEffects(const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_BaseWeapon_C", "PlayEffects");

	Params::BP_BaseWeapon_C_PlayEffects Parms{};

	Parms.Hit = std::move(Hit);

	UObject::ProcessEvent(Func, &Parms);
}

}

